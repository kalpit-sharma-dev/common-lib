// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/messaging (interfaces: Service)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/kafka"
	messaging "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/messaging"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockService) Connect(arg0 *kafka.ConsumerKafkaInOutParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockServiceMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockService)(nil).Connect), arg0)
}

// Listen mocks base method.
func (m *MockService) Listen(arg0 messaging.ListenHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockServiceMockRecorder) Listen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockService)(nil).Listen), arg0)
}

// ListenWithLimiter mocks base method.
func (m *MockService) ListenWithLimiter(arg0 messaging.ListenHandler, arg1 kafka.Limiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenWithLimiter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenWithLimiter indicates an expected call of ListenWithLimiter.
func (mr *MockServiceMockRecorder) ListenWithLimiter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenWithLimiter", reflect.TypeOf((*MockService)(nil).ListenWithLimiter), arg0, arg1)
}

// MarkOffset mocks base method.
func (m *MockService) MarkOffset(arg0 messaging.PartitionParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkOffset", arg0)
}

// MarkOffset indicates an expected call of MarkOffset.
func (mr *MockServiceMockRecorder) MarkOffset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOffset", reflect.TypeOf((*MockService)(nil).MarkOffset), arg0)
}

// Publish mocks base method.
func (m *MockService) Publish(arg0 *messaging.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockServiceMockRecorder) Publish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockService)(nil).Publish), arg0)
}
