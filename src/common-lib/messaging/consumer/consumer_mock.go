// Code generated by MockGen. DO NOT EDIT.
// Source: consumer.go

// Package consumer is a generated GoMock package.
package consumer

import (
	reflect "reflect"

	kafka "github.com/confluentinc/confluent-kafka-go/kafka"
	gomock "github.com/golang/mock/gomock"
)

// MockConsumerLogger is a mock of ConsumerLogger interface.
type MockConsumerLogger struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerLoggerMockRecorder
}

// MockConsumerLoggerMockRecorder is the mock recorder for MockConsumerLogger.
type MockConsumerLoggerMockRecorder struct {
	mock *MockConsumerLogger
}

// NewMockConsumerLogger creates a new mock instance.
func NewMockConsumerLogger(ctrl *gomock.Controller) *MockConsumerLogger {
	mock := &MockConsumerLogger{ctrl: ctrl}
	mock.recorder = &MockConsumerLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerLogger) EXPECT() *MockConsumerLoggerMockRecorder {
	return m.recorder
}

// Printf mocks base method.
func (m *MockConsumerLogger) Printf(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockConsumerLoggerMockRecorder) Printf(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockConsumerLogger)(nil).Printf), varargs...)
}

// Mockconsumer is a mock of consumer interface.
type Mockconsumer struct {
	ctrl     *gomock.Controller
	recorder *MockconsumerMockRecorder
}

// MockconsumerMockRecorder is the mock recorder for Mockconsumer.
type MockconsumerMockRecorder struct {
	mock *Mockconsumer
}

// NewMockconsumer creates a new mock instance.
func NewMockconsumer(ctrl *gomock.Controller) *Mockconsumer {
	mock := &Mockconsumer{ctrl: ctrl}
	mock.recorder = &MockconsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockconsumer) EXPECT() *MockconsumerMockRecorder {
	return m.recorder
}

// Assign mocks base method.
func (m *Mockconsumer) Assign(partitions []kafka.TopicPartition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assign", partitions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Assign indicates an expected call of Assign.
func (mr *MockconsumerMockRecorder) Assign(partitions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*Mockconsumer)(nil).Assign), partitions)
}

// Assignment mocks base method.
func (m *Mockconsumer) Assignment() ([]kafka.TopicPartition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assignment")
	ret0, _ := ret[0].([]kafka.TopicPartition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Assignment indicates an expected call of Assignment.
func (mr *MockconsumerMockRecorder) Assignment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assignment", reflect.TypeOf((*Mockconsumer)(nil).Assignment))
}

// Close mocks base method.
func (m *Mockconsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockconsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockconsumer)(nil).Close))
}

// CommitOffsets mocks base method.
func (m *Mockconsumer) CommitOffsets(offsets []kafka.TopicPartition) ([]kafka.TopicPartition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitOffsets", offsets)
	ret0, _ := ret[0].([]kafka.TopicPartition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitOffsets indicates an expected call of CommitOffsets.
func (mr *MockconsumerMockRecorder) CommitOffsets(offsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitOffsets", reflect.TypeOf((*Mockconsumer)(nil).CommitOffsets), offsets)
}

// Pause mocks base method.
func (m *Mockconsumer) Pause(partitions []kafka.TopicPartition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", partitions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockconsumerMockRecorder) Pause(partitions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*Mockconsumer)(nil).Pause), partitions)
}

// Poll mocks base method.
func (m *Mockconsumer) Poll(timeoutMs int) kafka.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll", timeoutMs)
	ret0, _ := ret[0].(kafka.Event)
	return ret0
}

// Poll indicates an expected call of Poll.
func (mr *MockconsumerMockRecorder) Poll(timeoutMs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*Mockconsumer)(nil).Poll), timeoutMs)
}

// Resume mocks base method.
func (m *Mockconsumer) Resume(partitions []kafka.TopicPartition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", partitions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockconsumerMockRecorder) Resume(partitions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*Mockconsumer)(nil).Resume), partitions)
}

// StoreOffsets mocks base method.
func (m *Mockconsumer) StoreOffsets(offsets []kafka.TopicPartition) ([]kafka.TopicPartition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOffsets", offsets)
	ret0, _ := ret[0].([]kafka.TopicPartition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreOffsets indicates an expected call of StoreOffsets.
func (mr *MockconsumerMockRecorder) StoreOffsets(offsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOffsets", reflect.TypeOf((*Mockconsumer)(nil).StoreOffsets), offsets)
}

// SubscribeTopics mocks base method.
func (m *Mockconsumer) SubscribeTopics(topics []string, rebalanceCb kafka.RebalanceCb) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTopics", topics, rebalanceCb)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeTopics indicates an expected call of SubscribeTopics.
func (mr *MockconsumerMockRecorder) SubscribeTopics(topics, rebalanceCb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTopics", reflect.TypeOf((*Mockconsumer)(nil).SubscribeTopics), topics, rebalanceCb)
}

// Unassign mocks base method.
func (m *Mockconsumer) Unassign() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unassign")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unassign indicates an expected call of Unassign.
func (mr *MockconsumerMockRecorder) Unassign() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unassign", reflect.TypeOf((*Mockconsumer)(nil).Unassign))
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockService)(nil).Close))
}

// CloseWait mocks base method.
func (m *MockService) CloseWait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWait")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWait indicates an expected call of CloseWait.
func (mr *MockServiceMockRecorder) CloseWait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWait", reflect.TypeOf((*MockService)(nil).CloseWait))
}

// Health mocks base method.
func (m *MockService) Health() (Health, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(Health)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockServiceMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockService)(nil).Health))
}

// MarkOffset mocks base method.
func (m *MockService) MarkOffset(topic string, partition int32, offset int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkOffset", topic, partition, offset)
}

// MarkOffset indicates an expected call of MarkOffset.
func (mr *MockServiceMockRecorder) MarkOffset(topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOffset", reflect.TypeOf((*MockService)(nil).MarkOffset), topic, partition, offset)
}

// Pull mocks base method.
func (m *MockService) Pull() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pull")
}

// Pull indicates an expected call of Pull.
func (mr *MockServiceMockRecorder) Pull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockService)(nil).Pull))
}

// MockPausableService is a mock of PausableService interface.
type MockPausableService struct {
	ctrl     *gomock.Controller
	recorder *MockPausableServiceMockRecorder
}

// MockPausableServiceMockRecorder is the mock recorder for MockPausableService.
type MockPausableServiceMockRecorder struct {
	mock *MockPausableService
}

// NewMockPausableService creates a new mock instance.
func NewMockPausableService(ctrl *gomock.Controller) *MockPausableService {
	mock := &MockPausableService{ctrl: ctrl}
	mock.recorder = &MockPausableServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPausableService) EXPECT() *MockPausableServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPausableService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPausableServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPausableService)(nil).Close))
}

// CloseWait mocks base method.
func (m *MockPausableService) CloseWait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWait")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWait indicates an expected call of CloseWait.
func (mr *MockPausableServiceMockRecorder) CloseWait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWait", reflect.TypeOf((*MockPausableService)(nil).CloseWait))
}

// Health mocks base method.
func (m *MockPausableService) Health() (Health, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(Health)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockPausableServiceMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockPausableService)(nil).Health))
}

// MarkOffset mocks base method.
func (m *MockPausableService) MarkOffset(topic string, partition int32, offset int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkOffset", topic, partition, offset)
}

// MarkOffset indicates an expected call of MarkOffset.
func (mr *MockPausableServiceMockRecorder) MarkOffset(topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOffset", reflect.TypeOf((*MockPausableService)(nil).MarkOffset), topic, partition, offset)
}

// Pause mocks base method.
func (m *MockPausableService) Pause(topic string, partition int32, offset int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", topic, partition, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockPausableServiceMockRecorder) Pause(topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockPausableService)(nil).Pause), topic, partition, offset)
}

// PauseAll mocks base method.
func (m *MockPausableService) PauseAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseAll indicates an expected call of PauseAll.
func (mr *MockPausableServiceMockRecorder) PauseAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseAll", reflect.TypeOf((*MockPausableService)(nil).PauseAll))
}

// Pull mocks base method.
func (m *MockPausableService) Pull() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pull")
}

// Pull indicates an expected call of Pull.
func (mr *MockPausableServiceMockRecorder) Pull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockPausableService)(nil).Pull))
}

// Resume mocks base method.
func (m *MockPausableService) Resume(topic string, partition int32, offset int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", topic, partition, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockPausableServiceMockRecorder) Resume(topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockPausableService)(nil).Resume), topic, partition, offset)
}

// ResumeAll mocks base method.
func (m *MockPausableService) ResumeAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeAll indicates an expected call of ResumeAll.
func (mr *MockPausableServiceMockRecorder) ResumeAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeAll", reflect.TypeOf((*MockPausableService)(nil).ResumeAll))
}

// MockPauseResumer is a mock of PauseResumer interface.
type MockPauseResumer struct {
	ctrl     *gomock.Controller
	recorder *MockPauseResumerMockRecorder
}

// MockPauseResumerMockRecorder is the mock recorder for MockPauseResumer.
type MockPauseResumerMockRecorder struct {
	mock *MockPauseResumer
}

// NewMockPauseResumer creates a new mock instance.
func NewMockPauseResumer(ctrl *gomock.Controller) *MockPauseResumer {
	mock := &MockPauseResumer{ctrl: ctrl}
	mock.recorder = &MockPauseResumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPauseResumer) EXPECT() *MockPauseResumerMockRecorder {
	return m.recorder
}

// Pause mocks base method.
func (m *MockPauseResumer) Pause(topic string, partition int32, offset int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", topic, partition, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockPauseResumerMockRecorder) Pause(topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockPauseResumer)(nil).Pause), topic, partition, offset)
}

// PauseAll mocks base method.
func (m *MockPauseResumer) PauseAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseAll indicates an expected call of PauseAll.
func (mr *MockPauseResumerMockRecorder) PauseAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseAll", reflect.TypeOf((*MockPauseResumer)(nil).PauseAll))
}

// Resume mocks base method.
func (m *MockPauseResumer) Resume(topic string, partition int32, offset int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", topic, partition, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockPauseResumerMockRecorder) Resume(topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockPauseResumer)(nil).Resume), topic, partition, offset)
}

// ResumeAll mocks base method.
func (m *MockPauseResumer) ResumeAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeAll indicates an expected call of ResumeAll.
func (mr *MockPauseResumerMockRecorder) ResumeAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeAll", reflect.TypeOf((*MockPauseResumer)(nil).ResumeAll))
}

// MockconsumerStrategy is a mock of consumerStrategy interface.
type MockconsumerStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockconsumerStrategyMockRecorder
}

// MockconsumerStrategyMockRecorder is the mock recorder for MockconsumerStrategy.
type MockconsumerStrategyMockRecorder struct {
	mock *MockconsumerStrategy
}

// NewMockconsumerStrategy creates a new mock instance.
func NewMockconsumerStrategy(ctrl *gomock.Controller) *MockconsumerStrategy {
	mock := &MockconsumerStrategy{ctrl: ctrl}
	mock.recorder = &MockconsumerStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconsumerStrategy) EXPECT() *MockconsumerStrategyMockRecorder {
	return m.recorder
}

// close mocks base method.
func (m *MockconsumerStrategy) close(wait bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "close", wait)
}

// close indicates an expected call of close.
func (mr *MockconsumerStrategyMockRecorder) close(wait interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*MockconsumerStrategy)(nil).close), wait)
}

// handleAssignedPartitions mocks base method.
func (m *MockconsumerStrategy) handleAssignedPartitions(p kafka.AssignedPartitions, msgProc func(*Message)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "handleAssignedPartitions", p, msgProc)
}

// handleAssignedPartitions indicates an expected call of handleAssignedPartitions.
func (mr *MockconsumerStrategyMockRecorder) handleAssignedPartitions(p, msgProc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleAssignedPartitions", reflect.TypeOf((*MockconsumerStrategy)(nil).handleAssignedPartitions), p, msgProc)
}

// handleMessage mocks base method.
func (m_2 *MockconsumerStrategy) handleMessage(m *kafka.Message) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "handleMessage", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleMessage indicates an expected call of handleMessage.
func (mr *MockconsumerStrategyMockRecorder) handleMessage(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleMessage", reflect.TypeOf((*MockconsumerStrategy)(nil).handleMessage), m)
}

// handleRevokedPartitions mocks base method.
func (m *MockconsumerStrategy) handleRevokedPartitions(p kafka.RevokedPartitions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "handleRevokedPartitions", p)
}

// handleRevokedPartitions indicates an expected call of handleRevokedPartitions.
func (mr *MockconsumerStrategyMockRecorder) handleRevokedPartitions(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleRevokedPartitions", reflect.TypeOf((*MockconsumerStrategy)(nil).handleRevokedPartitions), p)
}
