// Code generated by MockGen. DO NOT EDIT.
// Source: manual-consumer.go

// Package consumer is a generated GoMock package.
package consumer

import (
	reflect "reflect"

	kafka "github.com/confluentinc/confluent-kafka-go/kafka"
	gomock "github.com/golang/mock/gomock"
)

// MockManualService is a mock of ManualService interface.
type MockManualService struct {
	ctrl     *gomock.Controller
	recorder *MockManualServiceMockRecorder
}

// MockManualServiceMockRecorder is the mock recorder for MockManualService.
type MockManualServiceMockRecorder struct {
	mock *MockManualService
}

// NewMockManualService creates a new mock instance.
func NewMockManualService(ctrl *gomock.Controller) *MockManualService {
	mock := &MockManualService{ctrl: ctrl}
	mock.recorder = &MockManualServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManualService) EXPECT() *MockManualServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockManualService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockManualServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockManualService)(nil).Close))
}

// CommitOffset mocks base method.
func (m *MockManualService) CommitOffset(topic string, partition int32, offset int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitOffset", topic, partition, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitOffset indicates an expected call of CommitOffset.
func (mr *MockManualServiceMockRecorder) CommitOffset(topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitOffset", reflect.TypeOf((*MockManualService)(nil).CommitOffset), topic, partition, offset)
}

// Health mocks base method.
func (m *MockManualService) Health() (Health, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(Health)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockManualServiceMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockManualService)(nil).Health))
}

// Pause mocks base method.
func (m *MockManualService) Pause(topic string, partition int32, offset int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", topic, partition, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockManualServiceMockRecorder) Pause(topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockManualService)(nil).Pause), topic, partition, offset)
}

// PauseAll mocks base method.
func (m *MockManualService) PauseAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseAll indicates an expected call of PauseAll.
func (mr *MockManualServiceMockRecorder) PauseAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseAll", reflect.TypeOf((*MockManualService)(nil).PauseAll))
}

// Poll mocks base method.
func (m *MockManualService) Poll(timeout int) *kafka.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll", timeout)
	ret0, _ := ret[0].(*kafka.Message)
	return ret0
}

// Poll indicates an expected call of Poll.
func (mr *MockManualServiceMockRecorder) Poll(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockManualService)(nil).Poll), timeout)
}

// Resume mocks base method.
func (m *MockManualService) Resume(topic string, partition int32, offset int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", topic, partition, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockManualServiceMockRecorder) Resume(topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockManualService)(nil).Resume), topic, partition, offset)
}

// ResumeAll mocks base method.
func (m *MockManualService) ResumeAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeAll indicates an expected call of ResumeAll.
func (mr *MockManualServiceMockRecorder) ResumeAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeAll", reflect.TypeOf((*MockManualService)(nil).ResumeAll))
}
