// Code generated by MockGen. DO NOT EDIT.
// Source: offset_manager.go

// Package consumer is a generated GoMock package.
package consumer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockcommitStrategy is a mock of commitStrategy interface.
type MockcommitStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockcommitStrategyMockRecorder
}

// MockcommitStrategyMockRecorder is the mock recorder for MockcommitStrategy.
type MockcommitStrategyMockRecorder struct {
	mock *MockcommitStrategy
}

// NewMockcommitStrategy creates a new mock instance.
func NewMockcommitStrategy(ctrl *gomock.Controller) *MockcommitStrategy {
	mock := &MockcommitStrategy{ctrl: ctrl}
	mock.recorder = &MockcommitStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommitStrategy) EXPECT() *MockcommitStrategyMockRecorder {
	return m.recorder
}

// afterHandler mocks base method.
func (m *MockcommitStrategy) afterHandler(transaction, topic string, partition int32, offset int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "afterHandler", transaction, topic, partition, offset)
}

// afterHandler indicates an expected call of afterHandler.
func (mr *MockcommitStrategyMockRecorder) afterHandler(transaction, topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "afterHandler", reflect.TypeOf((*MockcommitStrategy)(nil).afterHandler), transaction, topic, partition, offset)
}

// beforeHandler mocks base method.
func (m *MockcommitStrategy) beforeHandler(transaction, topic string, partition int32, offset int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "beforeHandler", transaction, topic, partition, offset)
}

// beforeHandler indicates an expected call of beforeHandler.
func (mr *MockcommitStrategyMockRecorder) beforeHandler(transaction, topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "beforeHandler", reflect.TypeOf((*MockcommitStrategy)(nil).beforeHandler), transaction, topic, partition, offset)
}

// onPull mocks base method.
func (m *MockcommitStrategy) onPull(transaction, topic string, partition int32, offset int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onPull", transaction, topic, partition, offset)
}

// onPull indicates an expected call of onPull.
func (mr *MockcommitStrategyMockRecorder) onPull(transaction, topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onPull", reflect.TypeOf((*MockcommitStrategy)(nil).onPull), transaction, topic, partition, offset)
}
