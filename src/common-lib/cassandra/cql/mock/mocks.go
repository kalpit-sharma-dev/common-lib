// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/cassandra/cql (interfaces: Session,Query)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	cql "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/cassandra/cql"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSession) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
}

// Closed mocks base method.
func (m *MockSession) Closed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Closed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Closed indicates an expected call of Closed.
func (mr *MockSessionMockRecorder) Closed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Closed", reflect.TypeOf((*MockSession)(nil).Closed))
}

// ExecuteBatch mocks base method.
func (m *MockSession) ExecuteBatch(arg0 *gocql.Batch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteBatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteBatch indicates an expected call of ExecuteBatch.
func (mr *MockSessionMockRecorder) ExecuteBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBatch", reflect.TypeOf((*MockSession)(nil).ExecuteBatch), arg0)
}

// NewBatch mocks base method.
func (m *MockSession) NewBatch(arg0 gocql.BatchType) *gocql.Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch", arg0)
	ret0, _ := ret[0].(*gocql.Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch.
func (mr *MockSessionMockRecorder) NewBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockSession)(nil).NewBatch), arg0)
}

// Query mocks base method.
func (m *MockSession) Query(arg0 string, arg1 ...interface{}) cql.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(cql.Query)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockSessionMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockSession)(nil).Query), varargs...)
}

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// Attempts mocks base method.
func (m *MockQuery) Attempts() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attempts")
	ret0, _ := ret[0].(int)
	return ret0
}

// Attempts indicates an expected call of Attempts.
func (mr *MockQueryMockRecorder) Attempts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attempts", reflect.TypeOf((*MockQuery)(nil).Attempts))
}

// Bind mocks base method.
func (m *MockQuery) Bind(arg0 ...interface{}) *gocql.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Bind", varargs...)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockQueryMockRecorder) Bind(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockQuery)(nil).Bind), arg0...)
}

// Consistency mocks base method.
func (m *MockQuery) Consistency(arg0 gocql.Consistency) *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consistency", arg0)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// Consistency indicates an expected call of Consistency.
func (mr *MockQueryMockRecorder) Consistency(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consistency", reflect.TypeOf((*MockQuery)(nil).Consistency), arg0)
}

// DefaultTimestamp mocks base method.
func (m *MockQuery) DefaultTimestamp(arg0 bool) *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultTimestamp", arg0)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// DefaultTimestamp indicates an expected call of DefaultTimestamp.
func (mr *MockQueryMockRecorder) DefaultTimestamp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultTimestamp", reflect.TypeOf((*MockQuery)(nil).DefaultTimestamp), arg0)
}

// Exec mocks base method.
func (m *MockQuery) Exec() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec")
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockQueryMockRecorder) Exec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockQuery)(nil).Exec))
}

// GetConsistency mocks base method.
func (m *MockQuery) GetConsistency() gocql.Consistency {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsistency")
	ret0, _ := ret[0].(gocql.Consistency)
	return ret0
}

// GetConsistency indicates an expected call of GetConsistency.
func (mr *MockQueryMockRecorder) GetConsistency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsistency", reflect.TypeOf((*MockQuery)(nil).GetConsistency))
}

// GetRoutingKey mocks base method.
func (m *MockQuery) GetRoutingKey() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingKey")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutingKey indicates an expected call of GetRoutingKey.
func (mr *MockQueryMockRecorder) GetRoutingKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingKey", reflect.TypeOf((*MockQuery)(nil).GetRoutingKey))
}

// Idempotent mocks base method.
func (m *MockQuery) Idempotent(arg0 bool) *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Idempotent", arg0)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// Idempotent indicates an expected call of Idempotent.
func (mr *MockQueryMockRecorder) Idempotent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Idempotent", reflect.TypeOf((*MockQuery)(nil).Idempotent), arg0)
}

// IsIdempotent mocks base method.
func (m *MockQuery) IsIdempotent() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIdempotent")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsIdempotent indicates an expected call of IsIdempotent.
func (mr *MockQueryMockRecorder) IsIdempotent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIdempotent", reflect.TypeOf((*MockQuery)(nil).IsIdempotent))
}

// Iter mocks base method.
func (m *MockQuery) Iter() *gocql.Iter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iter")
	ret0, _ := ret[0].(*gocql.Iter)
	return ret0
}

// Iter indicates an expected call of Iter.
func (mr *MockQueryMockRecorder) Iter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iter", reflect.TypeOf((*MockQuery)(nil).Iter))
}

// Keyspace mocks base method.
func (m *MockQuery) Keyspace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keyspace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Keyspace indicates an expected call of Keyspace.
func (mr *MockQueryMockRecorder) Keyspace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keyspace", reflect.TypeOf((*MockQuery)(nil).Keyspace))
}

// Latency mocks base method.
func (m *MockQuery) Latency() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latency")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Latency indicates an expected call of Latency.
func (mr *MockQueryMockRecorder) Latency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latency", reflect.TypeOf((*MockQuery)(nil).Latency))
}

// MapScan mocks base method.
func (m *MockQuery) MapScan(arg0 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapScan", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MapScan indicates an expected call of MapScan.
func (mr *MockQueryMockRecorder) MapScan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapScan", reflect.TypeOf((*MockQuery)(nil).MapScan), arg0)
}

// MapScanCAS mocks base method.
func (m *MockQuery) MapScanCAS(arg0 map[string]interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapScanCAS", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapScanCAS indicates an expected call of MapScanCAS.
func (mr *MockQueryMockRecorder) MapScanCAS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapScanCAS", reflect.TypeOf((*MockQuery)(nil).MapScanCAS), arg0)
}

// NoSkipMetadata mocks base method.
func (m *MockQuery) NoSkipMetadata() *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoSkipMetadata")
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// NoSkipMetadata indicates an expected call of NoSkipMetadata.
func (mr *MockQueryMockRecorder) NoSkipMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoSkipMetadata", reflect.TypeOf((*MockQuery)(nil).NoSkipMetadata))
}

// Observer mocks base method.
func (m *MockQuery) Observer(arg0 gocql.QueryObserver) *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Observer", arg0)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// Observer indicates an expected call of Observer.
func (mr *MockQueryMockRecorder) Observer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Observer", reflect.TypeOf((*MockQuery)(nil).Observer), arg0)
}

// PageSize mocks base method.
func (m *MockQuery) PageSize(arg0 int) *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PageSize", arg0)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// PageSize indicates an expected call of PageSize.
func (mr *MockQueryMockRecorder) PageSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageSize", reflect.TypeOf((*MockQuery)(nil).PageSize), arg0)
}

// PageState mocks base method.
func (m *MockQuery) PageState(arg0 []byte) *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PageState", arg0)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// PageState indicates an expected call of PageState.
func (mr *MockQueryMockRecorder) PageState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageState", reflect.TypeOf((*MockQuery)(nil).PageState), arg0)
}

// Prefetch mocks base method.
func (m *MockQuery) Prefetch(arg0 float64) *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prefetch", arg0)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// Prefetch indicates an expected call of Prefetch.
func (mr *MockQueryMockRecorder) Prefetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prefetch", reflect.TypeOf((*MockQuery)(nil).Prefetch), arg0)
}

// Release mocks base method.
func (m *MockQuery) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockQueryMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockQuery)(nil).Release))
}

// RetryPolicy mocks base method.
func (m *MockQuery) RetryPolicy(arg0 gocql.RetryPolicy) *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryPolicy", arg0)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// RetryPolicy indicates an expected call of RetryPolicy.
func (mr *MockQueryMockRecorder) RetryPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryPolicy", reflect.TypeOf((*MockQuery)(nil).RetryPolicy), arg0)
}

// RoutingKey mocks base method.
func (m *MockQuery) RoutingKey(arg0 []byte) *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoutingKey", arg0)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// RoutingKey indicates an expected call of RoutingKey.
func (mr *MockQueryMockRecorder) RoutingKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoutingKey", reflect.TypeOf((*MockQuery)(nil).RoutingKey), arg0)
}

// Scan mocks base method.
func (m *MockQuery) Scan(arg0 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockQueryMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockQuery)(nil).Scan), arg0...)
}

// ScanCAS mocks base method.
func (m *MockQuery) ScanCAS(arg0 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanCAS", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanCAS indicates an expected call of ScanCAS.
func (mr *MockQueryMockRecorder) ScanCAS(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanCAS", reflect.TypeOf((*MockQuery)(nil).ScanCAS), arg0...)
}

// SerialConsistency mocks base method.
func (m *MockQuery) SerialConsistency(arg0 gocql.SerialConsistency) *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SerialConsistency", arg0)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// SerialConsistency indicates an expected call of SerialConsistency.
func (mr *MockQueryMockRecorder) SerialConsistency(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerialConsistency", reflect.TypeOf((*MockQuery)(nil).SerialConsistency), arg0)
}

// SetConsistency mocks base method.
func (m *MockQuery) SetConsistency(arg0 gocql.Consistency) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConsistency", arg0)
}

// SetConsistency indicates an expected call of SetConsistency.
func (mr *MockQueryMockRecorder) SetConsistency(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConsistency", reflect.TypeOf((*MockQuery)(nil).SetConsistency), arg0)
}

// Statement mocks base method.
func (m *MockQuery) Statement() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statement")
	ret0, _ := ret[0].(string)
	return ret0
}

// Statement indicates an expected call of Statement.
func (mr *MockQueryMockRecorder) Statement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statement", reflect.TypeOf((*MockQuery)(nil).Statement))
}

// String mocks base method.
func (m *MockQuery) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockQueryMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockQuery)(nil).String))
}

// Trace mocks base method.
func (m *MockQuery) Trace(arg0 gocql.Tracer) *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace", arg0)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// Trace indicates an expected call of Trace.
func (mr *MockQueryMockRecorder) Trace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockQuery)(nil).Trace), arg0)
}

// WithContext mocks base method.
func (m *MockQuery) WithContext(arg0 context.Context) *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", arg0)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockQueryMockRecorder) WithContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockQuery)(nil).WithContext), arg0)
}

// WithTimestamp mocks base method.
func (m *MockQuery) WithTimestamp(arg0 int64) *gocql.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTimestamp", arg0)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// WithTimestamp indicates an expected call of WithTimestamp.
func (mr *MockQueryMockRecorder) WithTimestamp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTimestamp", reflect.TypeOf((*MockQuery)(nil).WithTimestamp), arg0)
}
