// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/cassandra (interfaces: DbConnector,Factory,BatchQueryExecutor)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	cassandra "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/cassandra"
	cql "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/cassandra/cql"
	rest "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/web/rest"
)

// MockDbConnector is a mock of DbConnector interface.
type MockDbConnector struct {
	ctrl     *gomock.Controller
	recorder *MockDbConnectorMockRecorder
}

// MockDbConnectorMockRecorder is the mock recorder for MockDbConnector.
type MockDbConnectorMockRecorder struct {
	mock *MockDbConnector
}

// NewMockDbConnector creates a new mock instance.
func NewMockDbConnector(ctrl *gomock.Controller) *MockDbConnector {
	mock := &MockDbConnector{ctrl: ctrl}
	mock.recorder = &MockDbConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbConnector) EXPECT() *MockDbConnectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDbConnector) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDbConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDbConnector)(nil).Close))
}

// Closed mocks base method.
func (m *MockDbConnector) Closed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Closed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Closed indicates an expected call of Closed.
func (mr *MockDbConnectorMockRecorder) Closed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Closed", reflect.TypeOf((*MockDbConnector)(nil).Closed))
}

// Delete mocks base method.
func (m *MockDbConnector) Delete(arg0 string, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDbConnectorMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDbConnector)(nil).Delete), varargs...)
}

// DeleteWithScanCas mocks base method.
func (m *MockDbConnector) DeleteWithScanCas(arg0 *map[string]interface{}, arg1 string, arg2 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWithScanCas", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWithScanCas indicates an expected call of DeleteWithScanCas.
func (mr *MockDbConnectorMockRecorder) DeleteWithScanCas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithScanCas", reflect.TypeOf((*MockDbConnector)(nil).DeleteWithScanCas), varargs...)
}

// ExecuteDmlWithRetrial mocks base method.
func (m *MockDbConnector) ExecuteDmlWithRetrial(arg0 gocql.RetryPolicy, arg1 string, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteDmlWithRetrial", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteDmlWithRetrial indicates an expected call of ExecuteDmlWithRetrial.
func (mr *MockDbConnectorMockRecorder) ExecuteDmlWithRetrial(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDmlWithRetrial", reflect.TypeOf((*MockDbConnector)(nil).ExecuteDmlWithRetrial), varargs...)
}

// GetRandomUUID mocks base method.
func (m *MockDbConnector) GetRandomUUID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomUUID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomUUID indicates an expected call of GetRandomUUID.
func (mr *MockDbConnectorMockRecorder) GetRandomUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomUUID", reflect.TypeOf((*MockDbConnector)(nil).GetRandomUUID))
}

// Insert mocks base method.
func (m *MockDbConnector) Insert(arg0 string, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDbConnectorMockRecorder) Insert(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDbConnector)(nil).Insert), varargs...)
}

// InsertWithScanCas mocks base method.
func (m *MockDbConnector) InsertWithScanCas(arg0 *map[string]interface{}, arg1 string, arg2 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertWithScanCas", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertWithScanCas indicates an expected call of InsertWithScanCas.
func (mr *MockDbConnectorMockRecorder) InsertWithScanCas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWithScanCas", reflect.TypeOf((*MockDbConnector)(nil).InsertWithScanCas), varargs...)
}

// Query mocks base method.
func (m *MockDbConnector) Query(arg0 string, arg1 ...interface{}) cql.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(cql.Query)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockDbConnectorMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDbConnector)(nil).Query), varargs...)
}

// RunSelectQuery mocks base method.
func (m *MockDbConnector) RunSelectQuery(arg0 cql.Query) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSelectQuery", arg0)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunSelectQuery indicates an expected call of RunSelectQuery.
func (mr *MockDbConnectorMockRecorder) RunSelectQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSelectQuery", reflect.TypeOf((*MockDbConnector)(nil).RunSelectQuery), arg0)
}

// Select mocks base method.
func (m *MockDbConnector) Select(arg0 string, arg1 ...interface{}) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockDbConnectorMockRecorder) Select(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDbConnector)(nil).Select), varargs...)
}

// SelectWithPaging mocks base method.
func (m *MockDbConnector) SelectWithPaging(arg0 int, arg1 cassandra.ProcessRow, arg2 string, arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectWithPaging", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectWithPaging indicates an expected call of SelectWithPaging.
func (mr *MockDbConnectorMockRecorder) SelectWithPaging(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWithPaging", reflect.TypeOf((*MockDbConnector)(nil).SelectWithPaging), varargs...)
}

// SelectWithRetrial mocks base method.
func (m *MockDbConnector) SelectWithRetrial(arg0 gocql.RetryPolicy, arg1 string, arg2 ...interface{}) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectWithRetrial", varargs...)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectWithRetrial indicates an expected call of SelectWithRetrial.
func (mr *MockDbConnectorMockRecorder) SelectWithRetrial(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWithRetrial", reflect.TypeOf((*MockDbConnector)(nil).SelectWithRetrial), varargs...)
}

// Update mocks base method.
func (m *MockDbConnector) Update(arg0 string, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDbConnectorMockRecorder) Update(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDbConnector)(nil).Update), varargs...)
}

// UpdateWithScanCas mocks base method.
func (m *MockDbConnector) UpdateWithScanCas(arg0 *map[string]interface{}, arg1 string, arg2 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWithScanCas", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithScanCas indicates an expected call of UpdateWithScanCas.
func (mr *MockDbConnectorMockRecorder) UpdateWithScanCas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithScanCas", reflect.TypeOf((*MockDbConnector)(nil).UpdateWithScanCas), varargs...)
}

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// GetDbConnector mocks base method.
func (m *MockFactory) GetDbConnector(arg0 *cassandra.DbConfig) (cassandra.DbConnector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbConnector", arg0)
	ret0, _ := ret[0].(cassandra.DbConnector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDbConnector indicates an expected call of GetDbConnector.
func (mr *MockFactoryMockRecorder) GetDbConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbConnector", reflect.TypeOf((*MockFactory)(nil).GetDbConnector), arg0)
}

// GetNewDbConnector mocks base method.
func (m *MockFactory) GetNewDbConnector(arg0 *cassandra.DbConfig) (cassandra.DbConnector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewDbConnector", arg0)
	ret0, _ := ret[0].(cassandra.DbConnector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewDbConnector indicates an expected call of GetNewDbConnector.
func (mr *MockFactoryMockRecorder) GetNewDbConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewDbConnector", reflect.TypeOf((*MockFactory)(nil).GetNewDbConnector), arg0)
}

// Health mocks base method.
func (m *MockFactory) Health(arg0 *cassandra.DbConfig) rest.Statuser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0)
	ret0, _ := ret[0].(rest.Statuser)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockFactoryMockRecorder) Health(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockFactory)(nil).Health), arg0)
}

// MockBatchQueryExecutor is a mock of BatchQueryExecutor interface.
type MockBatchQueryExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockBatchQueryExecutorMockRecorder
}

// MockBatchQueryExecutorMockRecorder is the mock recorder for MockBatchQueryExecutor.
type MockBatchQueryExecutorMockRecorder struct {
	mock *MockBatchQueryExecutor
}

// NewMockBatchQueryExecutor creates a new mock instance.
func NewMockBatchQueryExecutor(ctrl *gomock.Controller) *MockBatchQueryExecutor {
	mock := &MockBatchQueryExecutor{ctrl: ctrl}
	mock.recorder = &MockBatchQueryExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchQueryExecutor) EXPECT() *MockBatchQueryExecutorMockRecorder {
	return m.recorder
}

// AddQuery mocks base method.
func (m *MockBatchQueryExecutor) AddQuery(arg0 string, arg1 ...interface{}) cassandra.BatchQueryExecutor {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddQuery", varargs...)
	ret0, _ := ret[0].(cassandra.BatchQueryExecutor)
	return ret0
}

// AddQuery indicates an expected call of AddQuery.
func (mr *MockBatchQueryExecutorMockRecorder) AddQuery(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuery", reflect.TypeOf((*MockBatchQueryExecutor)(nil).AddQuery), varargs...)
}

// Execute mocks base method.
func (m *MockBatchQueryExecutor) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockBatchQueryExecutorMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockBatchQueryExecutor)(nil).Execute))
}
