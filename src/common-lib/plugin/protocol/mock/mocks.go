// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/plugin/protocol (interfaces: Client,Server,ClientFactory,ServerFactory,ResponseSerializer)

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	protocol "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/plugin/protocol"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ReceiveResponse mocks base method.
func (m *MockClient) ReceiveResponse() (*protocol.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveResponse")
	ret0, _ := ret[0].(*protocol.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveResponse indicates an expected call of ReceiveResponse.
func (mr *MockClientMockRecorder) ReceiveResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveResponse", reflect.TypeOf((*MockClient)(nil).ReceiveResponse))
}

// SendRequest mocks base method.
func (m *MockClient) SendRequest(arg0 *protocol.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockClientMockRecorder) SendRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockClient)(nil).SendRequest), arg0)
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// ReceiveRequest mocks base method.
func (m *MockServer) ReceiveRequest() (*protocol.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveRequest")
	ret0, _ := ret[0].(*protocol.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveRequest indicates an expected call of ReceiveRequest.
func (mr *MockServerMockRecorder) ReceiveRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveRequest", reflect.TypeOf((*MockServer)(nil).ReceiveRequest))
}

// RegisterRoutes mocks base method.
func (m *MockServer) RegisterRoutes(arg0 ...*protocol.Route) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RegisterRoutes", varargs...)
}

// RegisterRoutes indicates an expected call of RegisterRoutes.
func (mr *MockServerMockRecorder) RegisterRoutes(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRoutes", reflect.TypeOf((*MockServer)(nil).RegisterRoutes), arg0...)
}

// SendResponse mocks base method.
func (m *MockServer) SendResponse(arg0 *protocol.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResponse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResponse indicates an expected call of SendResponse.
func (mr *MockServerMockRecorder) SendResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResponse", reflect.TypeOf((*MockServer)(nil).SendResponse), arg0)
}

// SetReqRespStream mocks base method.
func (m *MockServer) SetReqRespStream(arg0 io.Reader, arg1 io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReqRespStream", arg0, arg1)
}

// SetReqRespStream indicates an expected call of SetReqRespStream.
func (mr *MockServerMockRecorder) SetReqRespStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReqRespStream", reflect.TypeOf((*MockServer)(nil).SetReqRespStream), arg0, arg1)
}

// MockClientFactory is a mock of ClientFactory interface.
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientFactoryMockRecorder
}

// MockClientFactoryMockRecorder is the mock recorder for MockClientFactory.
type MockClientFactoryMockRecorder struct {
	mock *MockClientFactory
}

// NewMockClientFactory creates a new mock instance.
func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &MockClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientFactory) EXPECT() *MockClientFactoryMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockClientFactory) GetClient(arg0 io.Writer, arg1 io.Reader) protocol.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0, arg1)
	ret0, _ := ret[0].(protocol.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockClientFactoryMockRecorder) GetClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientFactory)(nil).GetClient), arg0, arg1)
}

// GetResponseSerializer mocks base method.
func (m *MockClientFactory) GetResponseSerializer() protocol.ResponseSerializer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseSerializer")
	ret0, _ := ret[0].(protocol.ResponseSerializer)
	return ret0
}

// GetResponseSerializer indicates an expected call of GetResponseSerializer.
func (mr *MockClientFactoryMockRecorder) GetResponseSerializer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseSerializer", reflect.TypeOf((*MockClientFactory)(nil).GetResponseSerializer))
}

// MockServerFactory is a mock of ServerFactory interface.
type MockServerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockServerFactoryMockRecorder
}

// MockServerFactoryMockRecorder is the mock recorder for MockServerFactory.
type MockServerFactoryMockRecorder struct {
	mock *MockServerFactory
}

// NewMockServerFactory creates a new mock instance.
func NewMockServerFactory(ctrl *gomock.Controller) *MockServerFactory {
	mock := &MockServerFactory{ctrl: ctrl}
	mock.recorder = &MockServerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerFactory) EXPECT() *MockServerFactoryMockRecorder {
	return m.recorder
}

// GetServer mocks base method.
func (m *MockServerFactory) GetServer(arg0 io.Reader, arg1 io.Writer) protocol.Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", arg0, arg1)
	ret0, _ := ret[0].(protocol.Server)
	return ret0
}

// GetServer indicates an expected call of GetServer.
func (mr *MockServerFactoryMockRecorder) GetServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockServerFactory)(nil).GetServer), arg0, arg1)
}

// MockResponseSerializer is a mock of ResponseSerializer interface.
type MockResponseSerializer struct {
	ctrl     *gomock.Controller
	recorder *MockResponseSerializerMockRecorder
}

// MockResponseSerializerMockRecorder is the mock recorder for MockResponseSerializer.
type MockResponseSerializerMockRecorder struct {
	mock *MockResponseSerializer
}

// NewMockResponseSerializer creates a new mock instance.
func NewMockResponseSerializer(ctrl *gomock.Controller) *MockResponseSerializer {
	mock := &MockResponseSerializer{ctrl: ctrl}
	mock.recorder = &MockResponseSerializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseSerializer) EXPECT() *MockResponseSerializerMockRecorder {
	return m.recorder
}

// Deserialize mocks base method.
func (m *MockResponseSerializer) Deserialize(arg0 io.Reader) (*protocol.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deserialize", arg0)
	ret0, _ := ret[0].(*protocol.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deserialize indicates an expected call of Deserialize.
func (mr *MockResponseSerializerMockRecorder) Deserialize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deserialize", reflect.TypeOf((*MockResponseSerializer)(nil).Deserialize), arg0)
}

// Serialize mocks base method.
func (m *MockResponseSerializer) Serialize(arg0 *protocol.Response, arg1 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serialize indicates an expected call of Serialize.
func (mr *MockResponseSerializerMockRecorder) Serialize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockResponseSerializer)(nil).Serialize), arg0, arg1)
}
