// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/env (interfaces: FactoryEnv,Env)

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	env "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/env"
)

// MockFactoryEnv is a mock of FactoryEnv interface.
type MockFactoryEnv struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryEnvMockRecorder
}

// MockFactoryEnvMockRecorder is the mock recorder for MockFactoryEnv.
type MockFactoryEnvMockRecorder struct {
	mock *MockFactoryEnv
}

// NewMockFactoryEnv creates a new mock instance.
func NewMockFactoryEnv(ctrl *gomock.Controller) *MockFactoryEnv {
	mock := &MockFactoryEnv{ctrl: ctrl}
	mock.recorder = &MockFactoryEnvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactoryEnv) EXPECT() *MockFactoryEnvMockRecorder {
	return m.recorder
}

// GetEnv mocks base method.
func (m *MockFactoryEnv) GetEnv() env.Env {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnv")
	ret0, _ := ret[0].(env.Env)
	return ret0
}

// GetEnv indicates an expected call of GetEnv.
func (mr *MockFactoryEnvMockRecorder) GetEnv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnv", reflect.TypeOf((*MockFactoryEnv)(nil).GetEnv))
}

// MockEnv is a mock of Env interface.
type MockEnv struct {
	ctrl     *gomock.Controller
	recorder *MockEnvMockRecorder
}

// MockEnvMockRecorder is the mock recorder for MockEnv.
type MockEnvMockRecorder struct {
	mock *MockEnv
}

// NewMockEnv creates a new mock instance.
func NewMockEnv(ctrl *gomock.Controller) *MockEnv {
	mock := &MockEnv{ctrl: ctrl}
	mock.recorder = &MockEnvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnv) EXPECT() *MockEnvMockRecorder {
	return m.recorder
}

// ExecuteBash mocks base method.
func (m *MockEnv) ExecuteBash(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteBash", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteBash indicates an expected call of ExecuteBash.
func (mr *MockEnvMockRecorder) ExecuteBash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBash", reflect.TypeOf((*MockEnv)(nil).ExecuteBash), arg0)
}

// GetCommandReader mocks base method.
func (m *MockEnv) GetCommandReader(arg0 string, arg1 ...string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommandReader", varargs...)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommandReader indicates an expected call of GetCommandReader.
func (mr *MockEnvMockRecorder) GetCommandReader(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandReader", reflect.TypeOf((*MockEnv)(nil).GetCommandReader), varargs...)
}

// GetDirectoryFileCount mocks base method.
func (m *MockEnv) GetDirectoryFileCount(arg0 string, arg1 ...[]string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDirectoryFileCount", varargs...)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectoryFileCount indicates an expected call of GetDirectoryFileCount.
func (mr *MockEnvMockRecorder) GetDirectoryFileCount(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectoryFileCount", reflect.TypeOf((*MockEnv)(nil).GetDirectoryFileCount), varargs...)
}

// GetExeDir mocks base method.
func (m *MockEnv) GetExeDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExeDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExeDir indicates an expected call of GetExeDir.
func (mr *MockEnvMockRecorder) GetExeDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExeDir", reflect.TypeOf((*MockEnv)(nil).GetExeDir))
}

// GetFileReader mocks base method.
func (m *MockEnv) GetFileReader(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileReader", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileReader indicates an expected call of GetFileReader.
func (mr *MockEnvMockRecorder) GetFileReader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileReader", reflect.TypeOf((*MockEnv)(nil).GetFileReader), arg0)
}
