// Package tokenize comprises a token based strategy that can be used
// to parse the a query filter and generate a Filter which consists of
// a query and a value as generated by the supplied Converter.
package tokenize

import (
	"fmt"
	"strings"
	"sync"

	"github.com/golang-collections/collections/stack"
	"gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/filter"
	"gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/filter/command"
)

const (
	paddedLHS string = " ( "
	paddedRHS string = " ) "
	blank     string = " "
)

const (
	errExtraBracketFound string = "Error in filter query | Location: %v | Error: Extra bracket found"
	errAccept            string = "Error in filter query | Location: %v | Error: %v"
	errGetCommandWrapper string = "Error in filter query | Location: %v | Error: %v"
)

var (
	ts     *Strategy
	doOnce sync.Once
)

// GetTokenStrategy : gets a token parsing based strategy singleton.
func GetStrategy() *Strategy {
	doOnce.Do(func() {
		ts = &Strategy{}
	})

	return ts
}

// Strategy : a strategy to get sql from filter using tokenization.
type Strategy struct {
}

// Parse : parses a given query by tokenizing and uses the supplied converter.
func (t Strategy) Parse(cnv command.Converter, query string, mapper func(string) string) (*filter.Filter, error) {
	result := filter.New("")
	brackets := stack.New()
	query = strings.TrimLeft(query, blank)
	query = strings.ReplaceAll(query, string(command.LHS), paddedLHS)
	query = strings.ReplaceAll(query, string(command.RHS), paddedRHS)
	query = strings.TrimSpace(query)
	query = paddedLHS + query + paddedRHS
	words := strings.Split(query, blank)

	for len(words) != 0 {
		cmd, size, err := command.GetCommandWrapperWithValidation(words, brackets)
		if err != nil {
			//nolint:goerr113
			return nil, fmt.Errorf(errGetCommandWrapper, strings.Join(words, " "), err)
		}

		if cmd != nil {
			out, err := cmd.Accept(cnv, mapper)
			if err != nil {
				//nolint:goerr113
				return nil, fmt.Errorf(errAccept, strings.Join(words, " "), err)
			}

			*result = result.Add(out)
		}

		words = words[size:]
	}

	if brackets.Len() > 0 {
		//nolint:goerr113
		return nil, fmt.Errorf(errExtraBracketFound, strings.Join(words, " "))
	}

	return result, nil
}
