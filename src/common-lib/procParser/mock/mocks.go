// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/procParser (interfaces: Parser,ParserFactory)

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	procParser "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/procParser"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockParser) Parse(arg0 procParser.Config, arg1 io.ReadCloser) (*procParser.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0, arg1)
	ret0, _ := ret[0].(*procParser.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockParserMockRecorder) Parse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockParser)(nil).Parse), arg0, arg1)
}

// MockParserFactory is a mock of ParserFactory interface.
type MockParserFactory struct {
	ctrl     *gomock.Controller
	recorder *MockParserFactoryMockRecorder
}

// MockParserFactoryMockRecorder is the mock recorder for MockParserFactory.
type MockParserFactoryMockRecorder struct {
	mock *MockParserFactory
}

// NewMockParserFactory creates a new mock instance.
func NewMockParserFactory(ctrl *gomock.Controller) *MockParserFactory {
	mock := &MockParserFactory{ctrl: ctrl}
	mock.recorder = &MockParserFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParserFactory) EXPECT() *MockParserFactoryMockRecorder {
	return m.recorder
}

// GetParser mocks base method.
func (m *MockParserFactory) GetParser() procParser.Parser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParser")
	ret0, _ := ret[0].(procParser.Parser)
	return ret0
}

// GetParser indicates an expected call of GetParser.
func (mr *MockParserFactoryMockRecorder) GetParser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParser", reflect.TypeOf((*MockParserFactory)(nil).GetParser))
}
