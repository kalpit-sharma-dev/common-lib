// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/cryptomgr (interfaces: CryptoMgr)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCryptoMgr is a mock of CryptoMgr interface.
type MockCryptoMgr struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoMgrMockRecorder
}

// MockCryptoMgrMockRecorder is the mock recorder for MockCryptoMgr.
type MockCryptoMgrMockRecorder struct {
	mock *MockCryptoMgr
}

// NewMockCryptoMgr creates a new mock instance.
func NewMockCryptoMgr(ctrl *gomock.Controller) *MockCryptoMgr {
	mock := &MockCryptoMgr{ctrl: ctrl}
	mock.recorder = &MockCryptoMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoMgr) EXPECT() *MockCryptoMgrMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockCryptoMgr) Decrypt(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockCryptoMgrMockRecorder) Decrypt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCryptoMgr)(nil).Decrypt), arg0, arg1)
}

// DecryptWithCacheKey mocks base method.
func (m *MockCryptoMgr) DecryptWithCacheKey(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptWithCacheKey", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptWithCacheKey indicates an expected call of DecryptWithCacheKey.
func (mr *MockCryptoMgrMockRecorder) DecryptWithCacheKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptWithCacheKey", reflect.TypeOf((*MockCryptoMgr)(nil).DecryptWithCacheKey), arg0)
}

// EncodePrivateKey mocks base method.
func (m *MockCryptoMgr) EncodePrivateKey() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodePrivateKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodePrivateKey indicates an expected call of EncodePrivateKey.
func (mr *MockCryptoMgrMockRecorder) EncodePrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodePrivateKey", reflect.TypeOf((*MockCryptoMgr)(nil).EncodePrivateKey))
}

// EncodePublicKey mocks base method.
func (m *MockCryptoMgr) EncodePublicKey() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodePublicKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodePublicKey indicates an expected call of EncodePublicKey.
func (mr *MockCryptoMgrMockRecorder) EncodePublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodePublicKey", reflect.TypeOf((*MockCryptoMgr)(nil).EncodePublicKey))
}

// Encrypt mocks base method.
func (m *MockCryptoMgr) Encrypt(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockCryptoMgrMockRecorder) Encrypt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCryptoMgr)(nil).Encrypt), arg0, arg1)
}

// EncryptWithCacheKey mocks base method.
func (m *MockCryptoMgr) EncryptWithCacheKey(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptWithCacheKey", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptWithCacheKey indicates an expected call of EncryptWithCacheKey.
func (mr *MockCryptoMgrMockRecorder) EncryptWithCacheKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptWithCacheKey", reflect.TypeOf((*MockCryptoMgr)(nil).EncryptWithCacheKey), arg0)
}

// GenerateKeys mocks base method.
func (m *MockCryptoMgr) GenerateKeys() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKeys")
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateKeys indicates an expected call of GenerateKeys.
func (mr *MockCryptoMgrMockRecorder) GenerateKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKeys", reflect.TypeOf((*MockCryptoMgr)(nil).GenerateKeys))
}

// LoadPrivateKey mocks base method.
func (m *MockCryptoMgr) LoadPrivateKey(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPrivateKey", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadPrivateKey indicates an expected call of LoadPrivateKey.
func (mr *MockCryptoMgrMockRecorder) LoadPrivateKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPrivateKey", reflect.TypeOf((*MockCryptoMgr)(nil).LoadPrivateKey), arg0)
}

// PrivateKeyInstance mocks base method.
func (m *MockCryptoMgr) PrivateKeyInstance(arg0 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateKeyInstance", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateKeyInstance indicates an expected call of PrivateKeyInstance.
func (mr *MockCryptoMgrMockRecorder) PrivateKeyInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateKeyInstance", reflect.TypeOf((*MockCryptoMgr)(nil).PrivateKeyInstance), arg0)
}

// PublicKeyInstance mocks base method.
func (m *MockCryptoMgr) PublicKeyInstance(arg0 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKeyInstance", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicKeyInstance indicates an expected call of PublicKeyInstance.
func (mr *MockCryptoMgrMockRecorder) PublicKeyInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKeyInstance", reflect.TypeOf((*MockCryptoMgr)(nil).PublicKeyInstance), arg0)
}

// SignData mocks base method.
func (m *MockCryptoMgr) SignData(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignData", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignData indicates an expected call of SignData.
func (mr *MockCryptoMgrMockRecorder) SignData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignData", reflect.TypeOf((*MockCryptoMgr)(nil).SignData), arg0, arg1)
}

// VerifyDataWithPublicKeyInstance mocks base method.
func (m *MockCryptoMgr) VerifyDataWithPublicKeyInstance(arg0, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDataWithPublicKeyInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyDataWithPublicKeyInstance indicates an expected call of VerifyDataWithPublicKeyInstance.
func (mr *MockCryptoMgrMockRecorder) VerifyDataWithPublicKeyInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDataWithPublicKeyInstance", reflect.TypeOf((*MockCryptoMgr)(nil).VerifyDataWithPublicKeyInstance), arg0, arg1, arg2)
}

// VerifyDataWithPublicKeyString mocks base method.
func (m *MockCryptoMgr) VerifyDataWithPublicKeyString(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDataWithPublicKeyString", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyDataWithPublicKeyString indicates an expected call of VerifyDataWithPublicKeyString.
func (mr *MockCryptoMgrMockRecorder) VerifyDataWithPublicKeyString(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDataWithPublicKeyString", reflect.TypeOf((*MockCryptoMgr)(nil).VerifyDataWithPublicKeyString), arg0, arg1, arg2)
}
