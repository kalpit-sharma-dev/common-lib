// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/json (interfaces: FactoryJSON,DeserializerJSON,SerializerJSON)

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	json "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/json"
)

// MockFactoryJSON is a mock of FactoryJSON interface.
type MockFactoryJSON struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryJSONMockRecorder
}

// MockFactoryJSONMockRecorder is the mock recorder for MockFactoryJSON.
type MockFactoryJSONMockRecorder struct {
	mock *MockFactoryJSON
}

// NewMockFactoryJSON creates a new mock instance.
func NewMockFactoryJSON(ctrl *gomock.Controller) *MockFactoryJSON {
	mock := &MockFactoryJSON{ctrl: ctrl}
	mock.recorder = &MockFactoryJSONMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactoryJSON) EXPECT() *MockFactoryJSONMockRecorder {
	return m.recorder
}

// GetDeserializerJSON mocks base method.
func (m *MockFactoryJSON) GetDeserializerJSON() json.DeserializerJSON {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeserializerJSON")
	ret0, _ := ret[0].(json.DeserializerJSON)
	return ret0
}

// GetDeserializerJSON indicates an expected call of GetDeserializerJSON.
func (mr *MockFactoryJSONMockRecorder) GetDeserializerJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeserializerJSON", reflect.TypeOf((*MockFactoryJSON)(nil).GetDeserializerJSON))
}

// GetSerializerJSON mocks base method.
func (m *MockFactoryJSON) GetSerializerJSON() json.SerializerJSON {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSerializerJSON")
	ret0, _ := ret[0].(json.SerializerJSON)
	return ret0
}

// GetSerializerJSON indicates an expected call of GetSerializerJSON.
func (mr *MockFactoryJSONMockRecorder) GetSerializerJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSerializerJSON", reflect.TypeOf((*MockFactoryJSON)(nil).GetSerializerJSON))
}

// MockDeserializerJSON is a mock of DeserializerJSON interface.
type MockDeserializerJSON struct {
	ctrl     *gomock.Controller
	recorder *MockDeserializerJSONMockRecorder
}

// MockDeserializerJSONMockRecorder is the mock recorder for MockDeserializerJSON.
type MockDeserializerJSONMockRecorder struct {
	mock *MockDeserializerJSON
}

// NewMockDeserializerJSON creates a new mock instance.
func NewMockDeserializerJSON(ctrl *gomock.Controller) *MockDeserializerJSON {
	mock := &MockDeserializerJSON{ctrl: ctrl}
	mock.recorder = &MockDeserializerJSONMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeserializerJSON) EXPECT() *MockDeserializerJSONMockRecorder {
	return m.recorder
}

// ReadFile mocks base method.
func (m *MockDeserializerJSON) ReadFile(arg0 interface{}, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockDeserializerJSONMockRecorder) ReadFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockDeserializerJSON)(nil).ReadFile), arg0, arg1)
}

// ReadString mocks base method.
func (m *MockDeserializerJSON) ReadString(arg0 interface{}, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadString", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadString indicates an expected call of ReadString.
func (mr *MockDeserializerJSONMockRecorder) ReadString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadString", reflect.TypeOf((*MockDeserializerJSON)(nil).ReadString), arg0, arg1)
}

// MockSerializerJSON is a mock of SerializerJSON interface.
type MockSerializerJSON struct {
	ctrl     *gomock.Controller
	recorder *MockSerializerJSONMockRecorder
}

// MockSerializerJSONMockRecorder is the mock recorder for MockSerializerJSON.
type MockSerializerJSONMockRecorder struct {
	mock *MockSerializerJSON
}

// NewMockSerializerJSON creates a new mock instance.
func NewMockSerializerJSON(ctrl *gomock.Controller) *MockSerializerJSON {
	mock := &MockSerializerJSON{ctrl: ctrl}
	mock.recorder = &MockSerializerJSONMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSerializerJSON) EXPECT() *MockSerializerJSONMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockSerializerJSON) Write(arg0 io.Writer, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockSerializerJSONMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSerializerJSON)(nil).Write), arg0, arg1)
}

// WriteByteStream mocks base method.
func (m *MockSerializerJSON) WriteByteStream(arg0 interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteByteStream", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteByteStream indicates an expected call of WriteByteStream.
func (mr *MockSerializerJSONMockRecorder) WriteByteStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteByteStream", reflect.TypeOf((*MockSerializerJSON)(nil).WriteByteStream), arg0)
}

// WriteFile mocks base method.
func (m *MockSerializerJSON) WriteFile(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockSerializerJSONMockRecorder) WriteFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockSerializerJSON)(nil).WriteFile), arg0, arg1)
}
