// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/clar (interfaces: ServiceInit,ServiceInitFactory)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clar "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/clar"
)

// MockServiceInit is a mock of ServiceInit interface.
type MockServiceInit struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInitMockRecorder
}

// MockServiceInitMockRecorder is the mock recorder for MockServiceInit.
type MockServiceInitMockRecorder struct {
	mock *MockServiceInit
}

// NewMockServiceInit creates a new mock instance.
func NewMockServiceInit(ctrl *gomock.Controller) *MockServiceInit {
	mock := &MockServiceInit{ctrl: ctrl}
	mock.recorder = &MockServiceInitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInit) EXPECT() *MockServiceInitMockRecorder {
	return m.recorder
}

// GetConfigPath mocks base method.
func (m *MockServiceInit) GetConfigPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConfigPath indicates an expected call of GetConfigPath.
func (mr *MockServiceInitMockRecorder) GetConfigPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigPath", reflect.TypeOf((*MockServiceInit)(nil).GetConfigPath))
}

// GetExecutablePath mocks base method.
func (m *MockServiceInit) GetExecutablePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutablePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExecutablePath indicates an expected call of GetExecutablePath.
func (mr *MockServiceInitMockRecorder) GetExecutablePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutablePath", reflect.TypeOf((*MockServiceInit)(nil).GetExecutablePath))
}

// GetLogFilePath mocks base method.
func (m *MockServiceInit) GetLogFilePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogFilePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLogFilePath indicates an expected call of GetLogFilePath.
func (mr *MockServiceInitMockRecorder) GetLogFilePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogFilePath", reflect.TypeOf((*MockServiceInit)(nil).GetLogFilePath))
}

// SetupOsArgs mocks base method.
func (m *MockServiceInit) SetupOsArgs(arg0, arg1 string, arg2 []string, arg3, arg4 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupOsArgs", arg0, arg1, arg2, arg3, arg4)
}

// SetupOsArgs indicates an expected call of SetupOsArgs.
func (mr *MockServiceInitMockRecorder) SetupOsArgs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupOsArgs", reflect.TypeOf((*MockServiceInit)(nil).SetupOsArgs), arg0, arg1, arg2, arg3, arg4)
}

// MockServiceInitFactory is a mock of ServiceInitFactory interface.
type MockServiceInitFactory struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInitFactoryMockRecorder
}

// MockServiceInitFactoryMockRecorder is the mock recorder for MockServiceInitFactory.
type MockServiceInitFactoryMockRecorder struct {
	mock *MockServiceInitFactory
}

// NewMockServiceInitFactory creates a new mock instance.
func NewMockServiceInitFactory(ctrl *gomock.Controller) *MockServiceInitFactory {
	mock := &MockServiceInitFactory{ctrl: ctrl}
	mock.recorder = &MockServiceInitFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInitFactory) EXPECT() *MockServiceInitFactoryMockRecorder {
	return m.recorder
}

// GetServiceInit mocks base method.
func (m *MockServiceInitFactory) GetServiceInit() clar.ServiceInit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceInit")
	ret0, _ := ret[0].(clar.ServiceInit)
	return ret0
}

// GetServiceInit indicates an expected call of GetServiceInit.
func (mr *MockServiceInitFactoryMockRecorder) GetServiceInit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInit", reflect.TypeOf((*MockServiceInitFactory)(nil).GetServiceInit))
}
