// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/kafka (interfaces: ProducerFactory,ConsumerFactory,ProducerService,ConsumerService,Limiter)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/kafka"
	encode "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/kafka/encode"
)

// MockProducerFactory is a mock of ProducerFactory interface.
type MockProducerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockProducerFactoryMockRecorder
}

// MockProducerFactoryMockRecorder is the mock recorder for MockProducerFactory.
type MockProducerFactoryMockRecorder struct {
	mock *MockProducerFactory
}

// NewMockProducerFactory creates a new mock instance.
func NewMockProducerFactory(ctrl *gomock.Controller) *MockProducerFactory {
	mock := &MockProducerFactory{ctrl: ctrl}
	mock.recorder = &MockProducerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerFactory) EXPECT() *MockProducerFactoryMockRecorder {
	return m.recorder
}

// GetConfluentProducerService mocks base method.
func (m *MockProducerFactory) GetConfluentProducerService(arg0 kafka.ProducerConfig) (kafka.ProducerService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfluentProducerService", arg0)
	ret0, _ := ret[0].(kafka.ProducerService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfluentProducerService indicates an expected call of GetConfluentProducerService.
func (mr *MockProducerFactoryMockRecorder) GetConfluentProducerService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfluentProducerService", reflect.TypeOf((*MockProducerFactory)(nil).GetConfluentProducerService), arg0)
}

// GetProducerService mocks base method.
func (m *MockProducerFactory) GetProducerService(arg0 kafka.ProducerConfig) (kafka.ProducerService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducerService", arg0)
	ret0, _ := ret[0].(kafka.ProducerService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducerService indicates an expected call of GetProducerService.
func (mr *MockProducerFactoryMockRecorder) GetProducerService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducerService", reflect.TypeOf((*MockProducerFactory)(nil).GetProducerService), arg0)
}

// MockConsumerFactory is a mock of ConsumerFactory interface.
type MockConsumerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerFactoryMockRecorder
}

// MockConsumerFactoryMockRecorder is the mock recorder for MockConsumerFactory.
type MockConsumerFactoryMockRecorder struct {
	mock *MockConsumerFactory
}

// NewMockConsumerFactory creates a new mock instance.
func NewMockConsumerFactory(ctrl *gomock.Controller) *MockConsumerFactory {
	mock := &MockConsumerFactory{ctrl: ctrl}
	mock.recorder = &MockConsumerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerFactory) EXPECT() *MockConsumerFactoryMockRecorder {
	return m.recorder
}

// GetConsumerService mocks base method.
func (m *MockConsumerFactory) GetConsumerService(arg0 kafka.ConsumerConfig) (kafka.ConsumerService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerService", arg0)
	ret0, _ := ret[0].(kafka.ConsumerService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumerService indicates an expected call of GetConsumerService.
func (mr *MockConsumerFactoryMockRecorder) GetConsumerService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerService", reflect.TypeOf((*MockConsumerFactory)(nil).GetConsumerService), arg0)
}

// MockProducerService is a mock of ProducerService interface.
type MockProducerService struct {
	ctrl     *gomock.Controller
	recorder *MockProducerServiceMockRecorder
}

// MockProducerServiceMockRecorder is the mock recorder for MockProducerService.
type MockProducerServiceMockRecorder struct {
	mock *MockProducerService
}

// NewMockProducerService creates a new mock instance.
func NewMockProducerService(ctrl *gomock.Controller) *MockProducerService {
	mock := &MockProducerService{ctrl: ctrl}
	mock.recorder = &MockProducerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerService) EXPECT() *MockProducerServiceMockRecorder {
	return m.recorder
}

// CloseConnection mocks base method.
func (m *MockProducerService) CloseConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockProducerServiceMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockProducerService)(nil).CloseConnection))
}

// Push mocks base method.
func (m *MockProducerService) Push(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockProducerServiceMockRecorder) Push(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockProducerService)(nil).Push), arg0, arg1)
}

// PushEncoder mocks base method.
func (m *MockProducerService) PushEncoder(arg0 string, arg1 encode.Encoder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushEncoder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushEncoder indicates an expected call of PushEncoder.
func (mr *MockProducerServiceMockRecorder) PushEncoder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushEncoder", reflect.TypeOf((*MockProducerService)(nil).PushEncoder), arg0, arg1)
}

// MockConsumerService is a mock of ConsumerService interface.
type MockConsumerService struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerServiceMockRecorder
}

// MockConsumerServiceMockRecorder is the mock recorder for MockConsumerService.
type MockConsumerServiceMockRecorder struct {
	mock *MockConsumerService
}

// NewMockConsumerService creates a new mock instance.
func NewMockConsumerService(ctrl *gomock.Controller) *MockConsumerService {
	mock := &MockConsumerService{ctrl: ctrl}
	mock.recorder = &MockConsumerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerService) EXPECT() *MockConsumerServiceMockRecorder {
	return m.recorder
}

// CloseConnection mocks base method.
func (m *MockConsumerService) CloseConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockConsumerServiceMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockConsumerService)(nil).CloseConnection))
}

// Connect mocks base method.
func (m *MockConsumerService) Connect(arg0 *kafka.ConsumerKafkaInOutParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockConsumerServiceMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConsumerService)(nil).Connect), arg0)
}

// MarkOffset mocks base method.
func (m *MockConsumerService) MarkOffset(arg0 string, arg1 int32, arg2 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkOffset", arg0, arg1, arg2)
}

// MarkOffset indicates an expected call of MarkOffset.
func (mr *MockConsumerServiceMockRecorder) MarkOffset(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOffset", reflect.TypeOf((*MockConsumerService)(nil).MarkOffset), arg0, arg1, arg2)
}

// PullHandler mocks base method.
func (m *MockConsumerService) PullHandler(arg0 kafka.ConsumerHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullHandler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullHandler indicates an expected call of PullHandler.
func (mr *MockConsumerServiceMockRecorder) PullHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullHandler", reflect.TypeOf((*MockConsumerService)(nil).PullHandler), arg0)
}

// PullHandlerWithLimiter mocks base method.
func (m *MockConsumerService) PullHandlerWithLimiter(arg0 kafka.ConsumerHandler, arg1 kafka.Limiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullHandlerWithLimiter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullHandlerWithLimiter indicates an expected call of PullHandlerWithLimiter.
func (mr *MockConsumerServiceMockRecorder) PullHandlerWithLimiter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullHandlerWithLimiter", reflect.TypeOf((*MockConsumerService)(nil).PullHandlerWithLimiter), arg0, arg1)
}

// MockLimiter is a mock of Limiter interface.
type MockLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockLimiterMockRecorder
}

// MockLimiterMockRecorder is the mock recorder for MockLimiter.
type MockLimiterMockRecorder struct {
	mock *MockLimiter
}

// NewMockLimiter creates a new mock instance.
func NewMockLimiter(ctrl *gomock.Controller) *MockLimiter {
	mock := &MockLimiter{ctrl: ctrl}
	mock.recorder = &MockLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimiter) EXPECT() *MockLimiterMockRecorder {
	return m.recorder
}

// IsConsumingAllowed mocks base method.
func (m *MockLimiter) IsConsumingAllowed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConsumingAllowed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConsumingAllowed indicates an expected call of IsConsumingAllowed.
func (mr *MockLimiterMockRecorder) IsConsumingAllowed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConsumingAllowed", reflect.TypeOf((*MockLimiter)(nil).IsConsumingAllowed))
}

// Wait mocks base method.
func (m *MockLimiter) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait.
func (mr *MockLimiterMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockLimiter)(nil).Wait))
}
