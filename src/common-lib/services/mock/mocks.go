// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/services/model (interfaces: VersionFactory,VersionService,VersionDependencies,HealthCheckServiceFactory,HealthCheckService,HealthCheckDalFactory,HealthCheckDal,HealthCheckDependencies)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	healthCheck "gitlab.kksharmadevdev.com/platform/platform-api-model/clients/model/Golang/resourceModel/healthCheck"
	version "gitlab.kksharmadevdev.com/platform/platform-api-model/clients/model/Golang/resourceModel/version"
	env "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/env"
	procParser "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/procParser"
	model "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/services/model"
)

// MockVersionFactory is a mock of VersionFactory interface.
type MockVersionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockVersionFactoryMockRecorder
}

// MockVersionFactoryMockRecorder is the mock recorder for MockVersionFactory.
type MockVersionFactoryMockRecorder struct {
	mock *MockVersionFactory
}

// NewMockVersionFactory creates a new mock instance.
func NewMockVersionFactory(ctrl *gomock.Controller) *MockVersionFactory {
	mock := &MockVersionFactory{ctrl: ctrl}
	mock.recorder = &MockVersionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionFactory) EXPECT() *MockVersionFactoryMockRecorder {
	return m.recorder
}

// GetVersionService mocks base method.
func (m *MockVersionFactory) GetVersionService() model.VersionService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionService")
	ret0, _ := ret[0].(model.VersionService)
	return ret0
}

// GetVersionService indicates an expected call of GetVersionService.
func (mr *MockVersionFactoryMockRecorder) GetVersionService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionService", reflect.TypeOf((*MockVersionFactory)(nil).GetVersionService))
}

// MockVersionService is a mock of VersionService interface.
type MockVersionService struct {
	ctrl     *gomock.Controller
	recorder *MockVersionServiceMockRecorder
}

// MockVersionServiceMockRecorder is the mock recorder for MockVersionService.
type MockVersionServiceMockRecorder struct {
	mock *MockVersionService
}

// NewMockVersionService creates a new mock instance.
func NewMockVersionService(ctrl *gomock.Controller) *MockVersionService {
	mock := &MockVersionService{ctrl: ctrl}
	mock.recorder = &MockVersionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionService) EXPECT() *MockVersionServiceMockRecorder {
	return m.recorder
}

// GetVersion mocks base method.
func (m *MockVersionService) GetVersion(arg0 model.Version) version.Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0)
	ret0, _ := ret[0].(version.Version)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockVersionServiceMockRecorder) GetVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockVersionService)(nil).GetVersion), arg0)
}

// MockVersionDependencies is a mock of VersionDependencies interface.
type MockVersionDependencies struct {
	ctrl     *gomock.Controller
	recorder *MockVersionDependenciesMockRecorder
}

// MockVersionDependenciesMockRecorder is the mock recorder for MockVersionDependencies.
type MockVersionDependenciesMockRecorder struct {
	mock *MockVersionDependencies
}

// NewMockVersionDependencies creates a new mock instance.
func NewMockVersionDependencies(ctrl *gomock.Controller) *MockVersionDependencies {
	mock := &MockVersionDependencies{ctrl: ctrl}
	mock.recorder = &MockVersionDependenciesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionDependencies) EXPECT() *MockVersionDependenciesMockRecorder {
	return m.recorder
}

// GetVersionService mocks base method.
func (m *MockVersionDependencies) GetVersionService() model.VersionService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionService")
	ret0, _ := ret[0].(model.VersionService)
	return ret0
}

// GetVersionService indicates an expected call of GetVersionService.
func (mr *MockVersionDependenciesMockRecorder) GetVersionService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionService", reflect.TypeOf((*MockVersionDependencies)(nil).GetVersionService))
}

// MockHealthCheckServiceFactory is a mock of HealthCheckServiceFactory interface.
type MockHealthCheckServiceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckServiceFactoryMockRecorder
}

// MockHealthCheckServiceFactoryMockRecorder is the mock recorder for MockHealthCheckServiceFactory.
type MockHealthCheckServiceFactoryMockRecorder struct {
	mock *MockHealthCheckServiceFactory
}

// NewMockHealthCheckServiceFactory creates a new mock instance.
func NewMockHealthCheckServiceFactory(ctrl *gomock.Controller) *MockHealthCheckServiceFactory {
	mock := &MockHealthCheckServiceFactory{ctrl: ctrl}
	mock.recorder = &MockHealthCheckServiceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckServiceFactory) EXPECT() *MockHealthCheckServiceFactoryMockRecorder {
	return m.recorder
}

// GetHealthCheckService mocks base method.
func (m *MockHealthCheckServiceFactory) GetHealthCheckService(arg0 model.HealthCheckDependencies) model.HealthCheckService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthCheckService", arg0)
	ret0, _ := ret[0].(model.HealthCheckService)
	return ret0
}

// GetHealthCheckService indicates an expected call of GetHealthCheckService.
func (mr *MockHealthCheckServiceFactoryMockRecorder) GetHealthCheckService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheckService", reflect.TypeOf((*MockHealthCheckServiceFactory)(nil).GetHealthCheckService), arg0)
}

// MockHealthCheckService is a mock of HealthCheckService interface.
type MockHealthCheckService struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckServiceMockRecorder
}

// MockHealthCheckServiceMockRecorder is the mock recorder for MockHealthCheckService.
type MockHealthCheckServiceMockRecorder struct {
	mock *MockHealthCheckService
}

// NewMockHealthCheckService creates a new mock instance.
func NewMockHealthCheckService(ctrl *gomock.Controller) *MockHealthCheckService {
	mock := &MockHealthCheckService{ctrl: ctrl}
	mock.recorder = &MockHealthCheckServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckService) EXPECT() *MockHealthCheckServiceMockRecorder {
	return m.recorder
}

// GetHealthCheck mocks base method.
func (m *MockHealthCheckService) GetHealthCheck(arg0 model.HealthCheck) (healthCheck.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthCheck", arg0)
	ret0, _ := ret[0].(healthCheck.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthCheck indicates an expected call of GetHealthCheck.
func (mr *MockHealthCheckServiceMockRecorder) GetHealthCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheck", reflect.TypeOf((*MockHealthCheckService)(nil).GetHealthCheck), arg0)
}

// MockHealthCheckDalFactory is a mock of HealthCheckDalFactory interface.
type MockHealthCheckDalFactory struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckDalFactoryMockRecorder
}

// MockHealthCheckDalFactoryMockRecorder is the mock recorder for MockHealthCheckDalFactory.
type MockHealthCheckDalFactoryMockRecorder struct {
	mock *MockHealthCheckDalFactory
}

// NewMockHealthCheckDalFactory creates a new mock instance.
func NewMockHealthCheckDalFactory(ctrl *gomock.Controller) *MockHealthCheckDalFactory {
	mock := &MockHealthCheckDalFactory{ctrl: ctrl}
	mock.recorder = &MockHealthCheckDalFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckDalFactory) EXPECT() *MockHealthCheckDalFactoryMockRecorder {
	return m.recorder
}

// GetHealthCheckDal mocks base method.
func (m *MockHealthCheckDalFactory) GetHealthCheckDal(arg0 model.HealthCheckDependencies) model.HealthCheckDal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthCheckDal", arg0)
	ret0, _ := ret[0].(model.HealthCheckDal)
	return ret0
}

// GetHealthCheckDal indicates an expected call of GetHealthCheckDal.
func (mr *MockHealthCheckDalFactoryMockRecorder) GetHealthCheckDal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheckDal", reflect.TypeOf((*MockHealthCheckDalFactory)(nil).GetHealthCheckDal), arg0)
}

// MockHealthCheckDal is a mock of HealthCheckDal interface.
type MockHealthCheckDal struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckDalMockRecorder
}

// MockHealthCheckDalMockRecorder is the mock recorder for MockHealthCheckDal.
type MockHealthCheckDalMockRecorder struct {
	mock *MockHealthCheckDal
}

// NewMockHealthCheckDal creates a new mock instance.
func NewMockHealthCheckDal(ctrl *gomock.Controller) *MockHealthCheckDal {
	mock := &MockHealthCheckDal{ctrl: ctrl}
	mock.recorder = &MockHealthCheckDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckDal) EXPECT() *MockHealthCheckDalMockRecorder {
	return m.recorder
}

// GetHealthCheck mocks base method.
func (m *MockHealthCheckDal) GetHealthCheck(arg0 model.HealthCheck) (healthCheck.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthCheck", arg0)
	ret0, _ := ret[0].(healthCheck.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthCheck indicates an expected call of GetHealthCheck.
func (mr *MockHealthCheckDalMockRecorder) GetHealthCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheck", reflect.TypeOf((*MockHealthCheckDal)(nil).GetHealthCheck), arg0)
}

// MockHealthCheckDependencies is a mock of HealthCheckDependencies interface.
type MockHealthCheckDependencies struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckDependenciesMockRecorder
}

// MockHealthCheckDependenciesMockRecorder is the mock recorder for MockHealthCheckDependencies.
type MockHealthCheckDependenciesMockRecorder struct {
	mock *MockHealthCheckDependencies
}

// NewMockHealthCheckDependencies creates a new mock instance.
func NewMockHealthCheckDependencies(ctrl *gomock.Controller) *MockHealthCheckDependencies {
	mock := &MockHealthCheckDependencies{ctrl: ctrl}
	mock.recorder = &MockHealthCheckDependenciesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckDependencies) EXPECT() *MockHealthCheckDependenciesMockRecorder {
	return m.recorder
}

// GetEnv mocks base method.
func (m *MockHealthCheckDependencies) GetEnv() env.Env {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnv")
	ret0, _ := ret[0].(env.Env)
	return ret0
}

// GetEnv indicates an expected call of GetEnv.
func (mr *MockHealthCheckDependenciesMockRecorder) GetEnv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnv", reflect.TypeOf((*MockHealthCheckDependencies)(nil).GetEnv))
}

// GetHealthCheckDal mocks base method.
func (m *MockHealthCheckDependencies) GetHealthCheckDal(arg0 model.HealthCheckDependencies) model.HealthCheckDal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthCheckDal", arg0)
	ret0, _ := ret[0].(model.HealthCheckDal)
	return ret0
}

// GetHealthCheckDal indicates an expected call of GetHealthCheckDal.
func (mr *MockHealthCheckDependenciesMockRecorder) GetHealthCheckDal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheckDal", reflect.TypeOf((*MockHealthCheckDependencies)(nil).GetHealthCheckDal), arg0)
}

// GetHealthCheckService mocks base method.
func (m *MockHealthCheckDependencies) GetHealthCheckService(arg0 model.HealthCheckDependencies) model.HealthCheckService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthCheckService", arg0)
	ret0, _ := ret[0].(model.HealthCheckService)
	return ret0
}

// GetHealthCheckService indicates an expected call of GetHealthCheckService.
func (mr *MockHealthCheckDependenciesMockRecorder) GetHealthCheckService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheckService", reflect.TypeOf((*MockHealthCheckDependencies)(nil).GetHealthCheckService), arg0)
}

// GetParser mocks base method.
func (m *MockHealthCheckDependencies) GetParser() procParser.Parser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParser")
	ret0, _ := ret[0].(procParser.Parser)
	return ret0
}

// GetParser indicates an expected call of GetParser.
func (mr *MockHealthCheckDependenciesMockRecorder) GetParser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParser", reflect.TypeOf((*MockHealthCheckDependencies)(nil).GetParser))
}

// GetVersionService mocks base method.
func (m *MockHealthCheckDependencies) GetVersionService() model.VersionService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionService")
	ret0, _ := ret[0].(model.VersionService)
	return ret0
}

// GetVersionService indicates an expected call of GetVersionService.
func (mr *MockHealthCheckDependenciesMockRecorder) GetVersionService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionService", reflect.TypeOf((*MockHealthCheckDependencies)(nil).GetVersionService))
}
