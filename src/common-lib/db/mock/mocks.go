// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/db (interfaces: DatabaseProvider,DatabaseConnectionProvider)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/db"
)

// MockDatabaseProvider is a mock of DatabaseProvider interface.
type MockDatabaseProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseProviderMockRecorder
}

// MockDatabaseProviderMockRecorder is the mock recorder for MockDatabaseProvider.
type MockDatabaseProviderMockRecorder struct {
	mock *MockDatabaseProvider
}

// NewMockDatabaseProvider creates a new mock instance.
func NewMockDatabaseProvider(ctrl *gomock.Controller) *MockDatabaseProvider {
	mock := &MockDatabaseProvider{ctrl: ctrl}
	mock.recorder = &MockDatabaseProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseProvider) EXPECT() *MockDatabaseProviderMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockDatabaseProvider) BeginTransaction(arg0 context.Context) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", arg0)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockDatabaseProviderMockRecorder) BeginTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockDatabaseProvider)(nil).BeginTransaction), arg0)
}

// CloseStatement mocks base method.
func (m *MockDatabaseProvider) CloseStatement(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseStatement", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseStatement indicates an expected call of CloseStatement.
func (mr *MockDatabaseProviderMockRecorder) CloseStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseStatement", reflect.TypeOf((*MockDatabaseProvider)(nil).CloseStatement), arg0)
}

// Exec mocks base method.
func (m *MockDatabaseProvider) Exec(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockDatabaseProviderMockRecorder) Exec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDatabaseProvider)(nil).Exec), arg0)
}

// ExecWithPrepare mocks base method.
func (m *MockDatabaseProvider) ExecWithPrepare(arg0 string, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecWithPrepare", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecWithPrepare indicates an expected call of ExecWithPrepare.
func (mr *MockDatabaseProviderMockRecorder) ExecWithPrepare(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecWithPrepare", reflect.TypeOf((*MockDatabaseProvider)(nil).ExecWithPrepare), varargs...)
}

// GetSingleConnectionProvider mocks base method.
func (m *MockDatabaseProvider) GetSingleConnectionProvider(arg0 context.Context, arg1 string) (db.DatabaseConnectionProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleConnectionProvider", arg0, arg1)
	ret0, _ := ret[0].(db.DatabaseConnectionProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleConnectionProvider indicates an expected call of GetSingleConnectionProvider.
func (mr *MockDatabaseProviderMockRecorder) GetSingleConnectionProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleConnectionProvider", reflect.TypeOf((*MockDatabaseProvider)(nil).GetSingleConnectionProvider), arg0, arg1)
}

// PrepareStatement mocks base method.
func (m *MockDatabaseProvider) PrepareStatement(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareStatement", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareStatement indicates an expected call of PrepareStatement.
func (mr *MockDatabaseProviderMockRecorder) PrepareStatement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStatement", reflect.TypeOf((*MockDatabaseProvider)(nil).PrepareStatement), arg0, arg1)
}

// Select mocks base method.
func (m *MockDatabaseProvider) Select(arg0 string) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockDatabaseProviderMockRecorder) Select(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDatabaseProvider)(nil).Select), arg0)
}

// SelectAndProcess mocks base method.
func (m *MockDatabaseProvider) SelectAndProcess(arg0 string, arg1 db.ProcessRow) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SelectAndProcess", arg0, arg1)
}

// SelectAndProcess indicates an expected call of SelectAndProcess.
func (mr *MockDatabaseProviderMockRecorder) SelectAndProcess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAndProcess", reflect.TypeOf((*MockDatabaseProvider)(nil).SelectAndProcess), arg0, arg1)
}

// SelectObjectAndProcess mocks base method.
func (m *MockDatabaseProvider) SelectObjectAndProcess(arg0 string, arg1 interface{}, arg2 db.ProcessObject, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SelectObjectAndProcess", arg0, arg1, arg2, arg3)
}

// SelectObjectAndProcess indicates an expected call of SelectObjectAndProcess.
func (mr *MockDatabaseProviderMockRecorder) SelectObjectAndProcess(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjectAndProcess", reflect.TypeOf((*MockDatabaseProvider)(nil).SelectObjectAndProcess), arg0, arg1, arg2, arg3)
}

// SelectObjectWithPrepareAndProcess mocks base method.
func (m *MockDatabaseProvider) SelectObjectWithPrepareAndProcess(arg0 string, arg1 interface{}, arg2 db.ProcessObject, arg3 string, arg4 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SelectObjectWithPrepareAndProcess", varargs...)
}

// SelectObjectWithPrepareAndProcess indicates an expected call of SelectObjectWithPrepareAndProcess.
func (mr *MockDatabaseProviderMockRecorder) SelectObjectWithPrepareAndProcess(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjectWithPrepareAndProcess", reflect.TypeOf((*MockDatabaseProvider)(nil).SelectObjectWithPrepareAndProcess), varargs...)
}

// SelectObjects mocks base method.
func (m *MockDatabaseProvider) SelectObjects(arg0 string, arg1 interface{}, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectObjects", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectObjects indicates an expected call of SelectObjects.
func (mr *MockDatabaseProviderMockRecorder) SelectObjects(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjects", reflect.TypeOf((*MockDatabaseProvider)(nil).SelectObjects), arg0, arg1, arg2)
}

// SelectObjectsWithPrepare mocks base method.
func (m *MockDatabaseProvider) SelectObjectsWithPrepare(arg0 string, arg1 interface{}, arg2 string, arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectObjectsWithPrepare", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectObjectsWithPrepare indicates an expected call of SelectObjectsWithPrepare.
func (mr *MockDatabaseProviderMockRecorder) SelectObjectsWithPrepare(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjectsWithPrepare", reflect.TypeOf((*MockDatabaseProvider)(nil).SelectObjectsWithPrepare), varargs...)
}

// SelectWithPrepare mocks base method.
func (m *MockDatabaseProvider) SelectWithPrepare(arg0 string, arg1 ...interface{}) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectWithPrepare", varargs...)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectWithPrepare indicates an expected call of SelectWithPrepare.
func (mr *MockDatabaseProviderMockRecorder) SelectWithPrepare(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWithPrepare", reflect.TypeOf((*MockDatabaseProvider)(nil).SelectWithPrepare), varargs...)
}

// SelectWithPrepareAndProcess mocks base method.
func (m *MockDatabaseProvider) SelectWithPrepareAndProcess(arg0 string, arg1 db.ProcessRow, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SelectWithPrepareAndProcess", varargs...)
}

// SelectWithPrepareAndProcess indicates an expected call of SelectWithPrepareAndProcess.
func (mr *MockDatabaseProviderMockRecorder) SelectWithPrepareAndProcess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWithPrepareAndProcess", reflect.TypeOf((*MockDatabaseProvider)(nil).SelectWithPrepareAndProcess), varargs...)
}

// MockDatabaseConnectionProvider is a mock of DatabaseConnectionProvider interface.
type MockDatabaseConnectionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseConnectionProviderMockRecorder
}

// MockDatabaseConnectionProviderMockRecorder is the mock recorder for MockDatabaseConnectionProvider.
type MockDatabaseConnectionProviderMockRecorder struct {
	mock *MockDatabaseConnectionProvider
}

// NewMockDatabaseConnectionProvider creates a new mock instance.
func NewMockDatabaseConnectionProvider(ctrl *gomock.Controller) *MockDatabaseConnectionProvider {
	mock := &MockDatabaseConnectionProvider{ctrl: ctrl}
	mock.recorder = &MockDatabaseConnectionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseConnectionProvider) EXPECT() *MockDatabaseConnectionProviderMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockDatabaseConnectionProvider) BeginTransaction(arg0 context.Context) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", arg0)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockDatabaseConnectionProviderMockRecorder) BeginTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).BeginTransaction), arg0)
}

// Close mocks base method.
func (m *MockDatabaseConnectionProvider) Close(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseConnectionProviderMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).Close), arg0)
}

// CloseStatement mocks base method.
func (m *MockDatabaseConnectionProvider) CloseStatement(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseStatement", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseStatement indicates an expected call of CloseStatement.
func (mr *MockDatabaseConnectionProviderMockRecorder) CloseStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseStatement", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).CloseStatement), arg0)
}

// Exec mocks base method.
func (m *MockDatabaseConnectionProvider) Exec(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockDatabaseConnectionProviderMockRecorder) Exec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).Exec), arg0)
}

// ExecWithPrepare mocks base method.
func (m *MockDatabaseConnectionProvider) ExecWithPrepare(arg0 string, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecWithPrepare", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecWithPrepare indicates an expected call of ExecWithPrepare.
func (mr *MockDatabaseConnectionProviderMockRecorder) ExecWithPrepare(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecWithPrepare", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).ExecWithPrepare), varargs...)
}

// GetSingleConnectionProvider mocks base method.
func (m *MockDatabaseConnectionProvider) GetSingleConnectionProvider(arg0 context.Context, arg1 string) (db.DatabaseConnectionProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleConnectionProvider", arg0, arg1)
	ret0, _ := ret[0].(db.DatabaseConnectionProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleConnectionProvider indicates an expected call of GetSingleConnectionProvider.
func (mr *MockDatabaseConnectionProviderMockRecorder) GetSingleConnectionProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleConnectionProvider", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).GetSingleConnectionProvider), arg0, arg1)
}

// PrepareStatement mocks base method.
func (m *MockDatabaseConnectionProvider) PrepareStatement(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareStatement", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareStatement indicates an expected call of PrepareStatement.
func (mr *MockDatabaseConnectionProviderMockRecorder) PrepareStatement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStatement", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).PrepareStatement), arg0, arg1)
}

// Select mocks base method.
func (m *MockDatabaseConnectionProvider) Select(arg0 string) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockDatabaseConnectionProviderMockRecorder) Select(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).Select), arg0)
}

// SelectAndProcess mocks base method.
func (m *MockDatabaseConnectionProvider) SelectAndProcess(arg0 string, arg1 db.ProcessRow) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SelectAndProcess", arg0, arg1)
}

// SelectAndProcess indicates an expected call of SelectAndProcess.
func (mr *MockDatabaseConnectionProviderMockRecorder) SelectAndProcess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAndProcess", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).SelectAndProcess), arg0, arg1)
}

// SelectObjectAndProcess mocks base method.
func (m *MockDatabaseConnectionProvider) SelectObjectAndProcess(arg0 string, arg1 interface{}, arg2 db.ProcessObject, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SelectObjectAndProcess", arg0, arg1, arg2, arg3)
}

// SelectObjectAndProcess indicates an expected call of SelectObjectAndProcess.
func (mr *MockDatabaseConnectionProviderMockRecorder) SelectObjectAndProcess(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjectAndProcess", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).SelectObjectAndProcess), arg0, arg1, arg2, arg3)
}

// SelectObjectWithPrepareAndProcess mocks base method.
func (m *MockDatabaseConnectionProvider) SelectObjectWithPrepareAndProcess(arg0 string, arg1 interface{}, arg2 db.ProcessObject, arg3 string, arg4 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SelectObjectWithPrepareAndProcess", varargs...)
}

// SelectObjectWithPrepareAndProcess indicates an expected call of SelectObjectWithPrepareAndProcess.
func (mr *MockDatabaseConnectionProviderMockRecorder) SelectObjectWithPrepareAndProcess(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjectWithPrepareAndProcess", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).SelectObjectWithPrepareAndProcess), varargs...)
}

// SelectObjects mocks base method.
func (m *MockDatabaseConnectionProvider) SelectObjects(arg0 string, arg1 interface{}, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectObjects", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectObjects indicates an expected call of SelectObjects.
func (mr *MockDatabaseConnectionProviderMockRecorder) SelectObjects(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjects", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).SelectObjects), arg0, arg1, arg2)
}

// SelectObjectsWithPrepare mocks base method.
func (m *MockDatabaseConnectionProvider) SelectObjectsWithPrepare(arg0 string, arg1 interface{}, arg2 string, arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectObjectsWithPrepare", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectObjectsWithPrepare indicates an expected call of SelectObjectsWithPrepare.
func (mr *MockDatabaseConnectionProviderMockRecorder) SelectObjectsWithPrepare(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjectsWithPrepare", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).SelectObjectsWithPrepare), varargs...)
}

// SelectWithPrepare mocks base method.
func (m *MockDatabaseConnectionProvider) SelectWithPrepare(arg0 string, arg1 ...interface{}) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectWithPrepare", varargs...)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectWithPrepare indicates an expected call of SelectWithPrepare.
func (mr *MockDatabaseConnectionProviderMockRecorder) SelectWithPrepare(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWithPrepare", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).SelectWithPrepare), varargs...)
}

// SelectWithPrepareAndProcess mocks base method.
func (m *MockDatabaseConnectionProvider) SelectWithPrepareAndProcess(arg0 string, arg1 db.ProcessRow, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SelectWithPrepareAndProcess", varargs...)
}

// SelectWithPrepareAndProcess indicates an expected call of SelectWithPrepareAndProcess.
func (mr *MockDatabaseConnectionProviderMockRecorder) SelectWithPrepareAndProcess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWithPrepareAndProcess", reflect.TypeOf((*MockDatabaseConnectionProvider)(nil).SelectWithPrepareAndProcess), varargs...)
}
