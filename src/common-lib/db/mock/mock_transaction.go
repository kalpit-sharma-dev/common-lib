// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/db (interfaces: Transaction)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/db"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit))
}

// ExecContext mocks base method.
func (m *MockTransaction) ExecContext(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockTransactionMockRecorder) ExecContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockTransaction)(nil).ExecContext), arg0, arg1)
}

// ExecWithPrepareContext mocks base method.
func (m *MockTransaction) ExecWithPrepareContext(arg0 context.Context, arg1 string, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecWithPrepareContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecWithPrepareContext indicates an expected call of ExecWithPrepareContext.
func (mr *MockTransactionMockRecorder) ExecWithPrepareContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecWithPrepareContext", reflect.TypeOf((*MockTransaction)(nil).ExecWithPrepareContext), varargs...)
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback))
}

// SelectObjectAndProcessContext mocks base method.
func (m *MockTransaction) SelectObjectAndProcessContext(arg0 context.Context, arg1 interface{}, arg2 db.ProcessObject, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SelectObjectAndProcessContext", arg0, arg1, arg2, arg3)
}

// SelectObjectAndProcessContext indicates an expected call of SelectObjectAndProcessContext.
func (mr *MockTransactionMockRecorder) SelectObjectAndProcessContext(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjectAndProcessContext", reflect.TypeOf((*MockTransaction)(nil).SelectObjectAndProcessContext), arg0, arg1, arg2, arg3)
}

// SelectObjectWithPrepareAndProcessContext mocks base method.
func (m *MockTransaction) SelectObjectWithPrepareAndProcessContext(arg0 context.Context, arg1 interface{}, arg2 db.ProcessObject, arg3 string, arg4 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SelectObjectWithPrepareAndProcessContext", varargs...)
}

// SelectObjectWithPrepareAndProcessContext indicates an expected call of SelectObjectWithPrepareAndProcessContext.
func (mr *MockTransactionMockRecorder) SelectObjectWithPrepareAndProcessContext(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjectWithPrepareAndProcessContext", reflect.TypeOf((*MockTransaction)(nil).SelectObjectWithPrepareAndProcessContext), varargs...)
}

// SelectObjectsContext mocks base method.
func (m *MockTransaction) SelectObjectsContext(arg0 context.Context, arg1 interface{}, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectObjectsContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectObjectsContext indicates an expected call of SelectObjectsContext.
func (mr *MockTransactionMockRecorder) SelectObjectsContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjectsContext", reflect.TypeOf((*MockTransaction)(nil).SelectObjectsContext), arg0, arg1, arg2)
}

// SelectObjectsWithPrepareContext mocks base method.
func (m *MockTransaction) SelectObjectsWithPrepareContext(arg0 context.Context, arg1 interface{}, arg2 string, arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectObjectsWithPrepareContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectObjectsWithPrepareContext indicates an expected call of SelectObjectsWithPrepareContext.
func (mr *MockTransactionMockRecorder) SelectObjectsWithPrepareContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjectsWithPrepareContext", reflect.TypeOf((*MockTransaction)(nil).SelectObjectsWithPrepareContext), varargs...)
}
