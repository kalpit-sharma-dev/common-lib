// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/namedpipes (interfaces: ServerPipe,ClientPipe)

// Package mock is a generated GoMock package.
package mock

import (
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	namedpipes "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/namedpipes"
)

// MockServerPipe is a mock of ServerPipe interface.
type MockServerPipe struct {
	ctrl     *gomock.Controller
	recorder *MockServerPipeMockRecorder
}

// MockServerPipeMockRecorder is the mock recorder for MockServerPipe.
type MockServerPipeMockRecorder struct {
	mock *MockServerPipe
}

// NewMockServerPipe creates a new mock instance.
func NewMockServerPipe(ctrl *gomock.Controller) *MockServerPipe {
	mock := &MockServerPipe{ctrl: ctrl}
	mock.recorder = &MockServerPipeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerPipe) EXPECT() *MockServerPipeMockRecorder {
	return m.recorder
}

// CreatePipe mocks base method.
func (m *MockServerPipe) CreatePipe(arg0 string, arg1 *namedpipes.PipeConfig) (net.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipe", arg0, arg1)
	ret0, _ := ret[0].(net.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipe indicates an expected call of CreatePipe.
func (mr *MockServerPipeMockRecorder) CreatePipe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipe", reflect.TypeOf((*MockServerPipe)(nil).CreatePipe), arg0, arg1)
}

// MockClientPipe is a mock of ClientPipe interface.
type MockClientPipe struct {
	ctrl     *gomock.Controller
	recorder *MockClientPipeMockRecorder
}

// MockClientPipeMockRecorder is the mock recorder for MockClientPipe.
type MockClientPipeMockRecorder struct {
	mock *MockClientPipe
}

// NewMockClientPipe creates a new mock instance.
func NewMockClientPipe(ctrl *gomock.Controller) *MockClientPipe {
	mock := &MockClientPipe{ctrl: ctrl}
	mock.recorder = &MockClientPipeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientPipe) EXPECT() *MockClientPipeMockRecorder {
	return m.recorder
}

// DialPipe mocks base method.
func (m *MockClientPipe) DialPipe(arg0 string, arg1 *time.Duration) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialPipe", arg0, arg1)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialPipe indicates an expected call of DialPipe.
func (mr *MockClientPipeMockRecorder) DialPipe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialPipe", reflect.TypeOf((*MockClientPipe)(nil).DialPipe), arg0, arg1)
}
