// Code generated by MockGen. DO NOT EDIT.
// Source: entityreference/manager.go

// Package entityreference is a generated GoMock package.
package entityreference

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddOne mocks base method.
func (m *MockRepo) AddOne(item *Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOne", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOne indicates an expected call of AddOne.
func (mr *MockRepoMockRecorder) AddOne(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOne", reflect.TypeOf((*MockRepo)(nil).AddOne), item)
}

// DeleteOne mocks base method.
func (m *MockRepo) DeleteOne(item *Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockRepoMockRecorder) DeleteOne(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockRepo)(nil).DeleteOne), item)
}

// GetOne mocks base method.
func (m *MockRepo) GetOne(keyCols ...interface{}) (*Reference, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keyCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOne", varargs...)
	ret0, _ := ret[0].(*Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockRepoMockRecorder) GetOne(keyCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockRepo)(nil).GetOne), keyCols...)
}

// GetReferences mocks base method.
func (m *MockRepo) GetReferences(keys ...interface{}) ([]*Reference, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReferences", varargs...)
	ret0, _ := ret[0].([]*Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferences indicates an expected call of GetReferences.
func (mr *MockRepoMockRecorder) GetReferences(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferences", reflect.TypeOf((*MockRepo)(nil).GetReferences), keys...)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockClient) Do(ctx context.Context, req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockClientMockRecorder) Do(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockClient)(nil).Do), ctx, req)
}
