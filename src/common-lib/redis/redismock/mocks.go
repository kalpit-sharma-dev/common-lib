// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package redismock is a generated GoMock package.
package redismock

import (
	reflect "reflect"
	time "time"

	redis "github.com/go-redis/redis"
	gomock "github.com/golang/mock/gomock"
	redis0 "gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/redis"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// CreatePipeline mocks base method.
func (m *MockClient) CreatePipeline() redis0.Pipeliner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline")
	ret0, _ := ret[0].(redis0.Pipeliner)
	return ret0
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockClientMockRecorder) CreatePipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockClient)(nil).CreatePipeline))
}

// Decr mocks base method.
func (m *MockClient) Decr(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decr", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decr indicates an expected call of Decr.
func (mr *MockClientMockRecorder) Decr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockClient)(nil).Decr), key)
}

// DecrBy mocks base method.
func (m *MockClient) DecrBy(key string, count int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrBy", key, count)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrBy indicates an expected call of DecrBy.
func (mr *MockClientMockRecorder) DecrBy(key, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrBy", reflect.TypeOf((*MockClient)(nil).DecrBy), key, count)
}

// Delete mocks base method.
func (m *MockClient) Delete(key ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range key {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(key ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), key...)
}

// Exists mocks base method.
func (m *MockClient) Exists(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockClientMockRecorder) Exists(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockClient)(nil).Exists), key)
}

// Expire mocks base method.
func (m *MockClient) Expire(key string, duration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", key, duration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expire indicates an expected call of Expire.
func (mr *MockClientMockRecorder) Expire(key, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockClient)(nil).Expire), key, duration)
}

// Get mocks base method.
func (m *MockClient) Get(key string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), key)
}

// Incr mocks base method.
func (m *MockClient) Incr(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr.
func (mr *MockClientMockRecorder) Incr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockClient)(nil).Incr), key)
}

// IncrBy mocks base method.
func (m *MockClient) IncrBy(key string, count int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrBy", key, count)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrBy indicates an expected call of IncrBy.
func (mr *MockClientMockRecorder) IncrBy(key, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrBy", reflect.TypeOf((*MockClient)(nil).IncrBy), key, count)
}

// Init mocks base method.
func (m *MockClient) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockClientMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockClient)(nil).Init))
}

// Keys mocks base method.
func (m *MockClient) Keys(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys.
func (mr *MockClientMockRecorder) Keys(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockClient)(nil).Keys), pattern)
}

// MGet mocks base method.
func (m *MockClient) MGet(keys ...string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGet", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockClientMockRecorder) MGet(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockClient)(nil).MGet), keys...)
}

// Ping mocks base method.
func (m *MockClient) Ping() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockClientMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClient)(nil).Ping))
}

// SAdd mocks base method.
func (m *MockClient) SAdd(key string, member ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range member {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SAdd indicates an expected call of SAdd.
func (mr *MockClientMockRecorder) SAdd(key interface{}, member ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, member...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockClient)(nil).SAdd), varargs...)
}

// SIsMember mocks base method.
func (m *MockClient) SIsMember(key string, member interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SIsMember", key, member)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SIsMember indicates an expected call of SIsMember.
func (mr *MockClientMockRecorder) SIsMember(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SIsMember", reflect.TypeOf((*MockClient)(nil).SIsMember), key, member)
}

// SMembers mocks base method.
func (m *MockClient) SMembers(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembers", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMembers indicates an expected call of SMembers.
func (mr *MockClientMockRecorder) SMembers(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembers", reflect.TypeOf((*MockClient)(nil).SMembers), key)
}

// SRem mocks base method.
func (m *MockClient) SRem(key string, member ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range member {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SRem", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SRem indicates an expected call of SRem.
func (mr *MockClientMockRecorder) SRem(key interface{}, member ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, member...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRem", reflect.TypeOf((*MockClient)(nil).SRem), varargs...)
}

// SUnionStore mocks base method.
func (m *MockClient) SUnionStore(destination string, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SUnionStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SUnionStore indicates an expected call of SUnionStore.
func (mr *MockClientMockRecorder) SUnionStore(destination interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUnionStore", reflect.TypeOf((*MockClient)(nil).SUnionStore), varargs...)
}

// Scan mocks base method.
func (m *MockClient) Scan(cursor uint64, match string, count int64) ([]string, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", cursor, match, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Scan indicates an expected call of Scan.
func (mr *MockClientMockRecorder) Scan(cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockClient)(nil).Scan), cursor, match, count)
}

// Set mocks base method.
func (m *MockClient) Set(key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockClientMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockClient)(nil).Set), key, value)
}

// SetWithExpiry mocks base method.
func (m *MockClient) SetWithExpiry(key string, value interface{}, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithExpiry", key, value, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithExpiry indicates an expected call of SetWithExpiry.
func (mr *MockClientMockRecorder) SetWithExpiry(key, value, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithExpiry", reflect.TypeOf((*MockClient)(nil).SetWithExpiry), key, value, duration)
}

// SubscribeChannel mocks base method.
func (m *MockClient) SubscribeChannel(pattern string) (<-chan *redis.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeChannel", pattern)
	ret0, _ := ret[0].(<-chan *redis.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeChannel indicates an expected call of SubscribeChannel.
func (mr *MockClientMockRecorder) SubscribeChannel(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeChannel", reflect.TypeOf((*MockClient)(nil).SubscribeChannel), pattern)
}

// TTL mocks base method.
func (m *MockClient) TTL(key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTL indicates an expected call of TTL.
func (mr *MockClientMockRecorder) TTL(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockClient)(nil).TTL), key)
}

// ZAdd mocks base method.
func (m *MockClient) ZAdd(key string, members ...redis0.Z) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAdd indicates an expected call of ZAdd.
func (mr *MockClientMockRecorder) ZAdd(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockClient)(nil).ZAdd), varargs...)
}

// ZRange mocks base method.
func (m *MockClient) ZRange(key string, start, stop int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRange indicates an expected call of ZRange.
func (mr *MockClientMockRecorder) ZRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockClient)(nil).ZRange), key, start, stop)
}

// ZRem mocks base method.
func (m *MockClient) ZRem(key string, member interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRem", key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRem indicates an expected call of ZRem.
func (mr *MockClientMockRecorder) ZRem(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRem", reflect.TypeOf((*MockClient)(nil).ZRem), key, member)
}

// MockPipeliner is a mock of Pipeliner interface.
type MockPipeliner struct {
	ctrl     *gomock.Controller
	recorder *MockPipelinerMockRecorder
}

// MockPipelinerMockRecorder is the mock recorder for MockPipeliner.
type MockPipelinerMockRecorder struct {
	mock *MockPipeliner
}

// NewMockPipeliner creates a new mock instance.
func NewMockPipeliner(ctrl *gomock.Controller) *MockPipeliner {
	mock := &MockPipeliner{ctrl: ctrl}
	mock.recorder = &MockPipelinerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipeliner) EXPECT() *MockPipelinerMockRecorder {
	return m.recorder
}

// ClosePipeliner mocks base method.
func (m *MockPipeliner) ClosePipeliner() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosePipeliner")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClosePipeliner indicates an expected call of ClosePipeliner.
func (mr *MockPipelinerMockRecorder) ClosePipeliner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePipeliner", reflect.TypeOf((*MockPipeliner)(nil).ClosePipeliner))
}

// Exec mocks base method.
func (m *MockPipeliner) Exec() ([]redis0.CmdOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec")
	ret0, _ := ret[0].([]redis0.CmdOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPipelinerMockRecorder) Exec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPipeliner)(nil).Exec))
}

// Expire mocks base method.
func (m *MockPipeliner) Expire(key string, duration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", key, duration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockPipelinerMockRecorder) Expire(key, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockPipeliner)(nil).Expire), key, duration)
}

// Incr mocks base method.
func (m *MockPipeliner) Incr(key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockPipelinerMockRecorder) Incr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockPipeliner)(nil).Incr), key)
}

// PGet mocks base method.
func (m *MockPipeliner) PGet(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PGet", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// PGet indicates an expected call of PGet.
func (mr *MockPipelinerMockRecorder) PGet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PGet", reflect.TypeOf((*MockPipeliner)(nil).PGet), key)
}

// PSAdd mocks base method.
func (m *MockPipeliner) PSAdd(key string, member ...interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range member {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PSAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// PSAdd indicates an expected call of PSAdd.
func (mr *MockPipelinerMockRecorder) PSAdd(key interface{}, member ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, member...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PSAdd", reflect.TypeOf((*MockPipeliner)(nil).PSAdd), varargs...)
}

// PSRem mocks base method.
func (m *MockPipeliner) PSRem(key string, member ...interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range member {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PSRem", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// PSRem indicates an expected call of PSRem.
func (mr *MockPipelinerMockRecorder) PSRem(key interface{}, member ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, member...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PSRem", reflect.TypeOf((*MockPipeliner)(nil).PSRem), varargs...)
}

// PSet mocks base method.
func (m *MockPipeliner) PSet(key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PSet", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PSet indicates an expected call of PSet.
func (mr *MockPipelinerMockRecorder) PSet(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PSet", reflect.TypeOf((*MockPipeliner)(nil).PSet), key, value)
}

// PSetWithExpiry mocks base method.
func (m *MockPipeliner) PSetWithExpiry(key string, value interface{}, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PSetWithExpiry", key, value, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// PSetWithExpiry indicates an expected call of PSetWithExpiry.
func (mr *MockPipelinerMockRecorder) PSetWithExpiry(key, value, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PSetWithExpiry", reflect.TypeOf((*MockPipeliner)(nil).PSetWithExpiry), key, value, duration)
}
