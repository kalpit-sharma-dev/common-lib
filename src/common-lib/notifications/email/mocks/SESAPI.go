// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/notifications/email (interfaces: Sesiface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ses "github.com/aws/aws-sdk-go-v2/service/ses"
	gomock "github.com/golang/mock/gomock"
)

// MockSesiface is a mock of Sesiface interface.
type MockSesiface struct {
	ctrl     *gomock.Controller
	recorder *MockSesifaceMockRecorder
}

// MockSesifaceMockRecorder is the mock recorder for MockSesiface.
type MockSesifaceMockRecorder struct {
	mock *MockSesiface
}

// NewMockSesiface creates a new mock instance.
func NewMockSesiface(ctrl *gomock.Controller) *MockSesiface {
	mock := &MockSesiface{ctrl: ctrl}
	mock.recorder = &MockSesifaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSesiface) EXPECT() *MockSesifaceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockSesiface) SendEmail(arg0 context.Context, arg1 *ses.SendEmailInput, arg2 ...func(*ses.Options)) (*ses.SendEmailOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEmail", varargs...)
	ret0, _ := ret[0].(*ses.SendEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockSesifaceMockRecorder) SendEmail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockSesiface)(nil).SendEmail), varargs...)
}
