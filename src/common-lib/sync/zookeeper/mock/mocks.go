// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.kksharmadevdev.com/platform/platform-common-lib/src/v6/sync/zookeeper (interfaces: Connection)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zk "github.com/samuel/go-zookeeper/zk"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// AddAuth mocks base method.
func (m *MockConnection) AddAuth(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuth", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAuth indicates an expected call of AddAuth.
func (mr *MockConnectionMockRecorder) AddAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuth", reflect.TypeOf((*MockConnection)(nil).AddAuth), arg0, arg1)
}

// Children mocks base method.
func (m *MockConnection) Children(arg0 string) ([]string, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Children", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Children indicates an expected call of Children.
func (mr *MockConnectionMockRecorder) Children(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Children", reflect.TypeOf((*MockConnection)(nil).Children), arg0)
}

// ChildrenW mocks base method.
func (m *MockConnection) ChildrenW(arg0 string) ([]string, *zk.Stat, <-chan zk.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChildrenW", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(<-chan zk.Event)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ChildrenW indicates an expected call of ChildrenW.
func (mr *MockConnectionMockRecorder) ChildrenW(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChildrenW", reflect.TypeOf((*MockConnection)(nil).ChildrenW), arg0)
}

// Close mocks base method.
func (m *MockConnection) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// Create mocks base method.
func (m *MockConnection) Create(arg0 string, arg1 []byte, arg2 int32, arg3 []zk.ACL) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockConnectionMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConnection)(nil).Create), arg0, arg1, arg2, arg3)
}

// CreateProtectedEphemeralSequential mocks base method.
func (m *MockConnection) CreateProtectedEphemeralSequential(arg0 string, arg1 []byte, arg2 []zk.ACL) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProtectedEphemeralSequential", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProtectedEphemeralSequential indicates an expected call of CreateProtectedEphemeralSequential.
func (mr *MockConnectionMockRecorder) CreateProtectedEphemeralSequential(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProtectedEphemeralSequential", reflect.TypeOf((*MockConnection)(nil).CreateProtectedEphemeralSequential), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockConnection) Delete(arg0 string, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockConnectionMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConnection)(nil).Delete), arg0, arg1)
}

// Exists mocks base method.
func (m *MockConnection) Exists(arg0 string) (bool, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Exists indicates an expected call of Exists.
func (mr *MockConnectionMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockConnection)(nil).Exists), arg0)
}

// ExistsW mocks base method.
func (m *MockConnection) ExistsW(arg0 string) (bool, *zk.Stat, <-chan zk.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsW", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(<-chan zk.Event)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ExistsW indicates an expected call of ExistsW.
func (mr *MockConnectionMockRecorder) ExistsW(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsW", reflect.TypeOf((*MockConnection)(nil).ExistsW), arg0)
}

// Get mocks base method.
func (m *MockConnection) Get(arg0 string) ([]byte, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockConnectionMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConnection)(nil).Get), arg0)
}

// GetACL mocks base method.
func (m *MockConnection) GetACL(arg0 string) ([]zk.ACL, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetACL", arg0)
	ret0, _ := ret[0].([]zk.ACL)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetACL indicates an expected call of GetACL.
func (mr *MockConnectionMockRecorder) GetACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetACL", reflect.TypeOf((*MockConnection)(nil).GetACL), arg0)
}

// GetW mocks base method.
func (m *MockConnection) GetW(arg0 string) ([]byte, *zk.Stat, <-chan zk.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetW", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(<-chan zk.Event)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetW indicates an expected call of GetW.
func (mr *MockConnectionMockRecorder) GetW(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetW", reflect.TypeOf((*MockConnection)(nil).GetW), arg0)
}

// Multi mocks base method.
func (m *MockConnection) Multi(arg0 ...interface{}) ([]zk.MultiResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Multi", varargs...)
	ret0, _ := ret[0].([]zk.MultiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Multi indicates an expected call of Multi.
func (mr *MockConnectionMockRecorder) Multi(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Multi", reflect.TypeOf((*MockConnection)(nil).Multi), arg0...)
}

// Server mocks base method.
func (m *MockConnection) Server() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Server")
	ret0, _ := ret[0].(string)
	return ret0
}

// Server indicates an expected call of Server.
func (mr *MockConnectionMockRecorder) Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Server", reflect.TypeOf((*MockConnection)(nil).Server))
}

// SessionID mocks base method.
func (m *MockConnection) SessionID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// SessionID indicates an expected call of SessionID.
func (mr *MockConnectionMockRecorder) SessionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionID", reflect.TypeOf((*MockConnection)(nil).SessionID))
}

// Set mocks base method.
func (m *MockConnection) Set(arg0 string, arg1 []byte, arg2 int32) (*zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(*zk.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockConnectionMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockConnection)(nil).Set), arg0, arg1, arg2)
}

// SetACL mocks base method.
func (m *MockConnection) SetACL(arg0 string, arg1 []zk.ACL, arg2 int32) (*zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetACL", arg0, arg1, arg2)
	ret0, _ := ret[0].(*zk.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetACL indicates an expected call of SetACL.
func (mr *MockConnectionMockRecorder) SetACL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetACL", reflect.TypeOf((*MockConnection)(nil).SetACL), arg0, arg1, arg2)
}

// SetLogger mocks base method.
func (m *MockConnection) SetLogger(arg0 zk.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockConnectionMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockConnection)(nil).SetLogger), arg0)
}

// State mocks base method.
func (m *MockConnection) State() zk.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(zk.State)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockConnectionMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockConnection)(nil).State))
}

// Sync mocks base method.
func (m *MockConnection) Sync(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockConnectionMockRecorder) Sync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockConnection)(nil).Sync), arg0)
}
